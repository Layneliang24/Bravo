# 生产环境Django后端Dockerfile
FROM python:3.11-slim

# 设置环境变量
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DJANGO_SETTINGS_MODULE=bravo.settings.production \
    PATH="/opt/venv/bin:$PATH"

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    gcc \
    default-libmysqlclient-dev \
    pkg-config \
    curl \
    && rm -rf /var/lib/apt/lists/*

# 创建虚拟环境
RUN python -m venv /opt/venv

# 设置工作目录
WORKDIR /app

# 复制依赖文件
COPY requirements/ requirements/
COPY requirements-prod.txt .

# 安装Python依赖
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements/prod.txt && \
    pip install --no-cache-dir -r requirements-prod.txt

# 复制项目代码
COPY . .

# 创建日志目录
RUN mkdir -p /var/log/django /var/log/celery

# 收集静态文件
RUN python manage.py collectstatic --noinput --settings=bravo.settings.production

# 创建非root用户
RUN groupadd -r django && useradd -r -g django django
RUN chown -R django:django /app /var/log/django /var/log/celery
USER django

# 健康检查
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health/ || exit 1

# 暴露端口
EXPOSE 8000

# 启动命令
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "3", "--timeout", "120", "--max-requests", "1000", "--preload", "bravo.wsgi:application"]
