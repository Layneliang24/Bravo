# 预提交钩子配置模板

repos:
  # 🚀 快速语法和格式检查优先
  # 通用检查 - 快速失败
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
        exclude: "bandit-report.json"
      - id: check-yaml
      - id: check-json
      - id: check-merge-conflict
      - id: check-added-large-files
      - id: check-case-conflict
      - id: debug-statements

  # Python 代码格式化
  - repo: https://github.com/psf/black
    rev: 23.11.0
    hooks:
      - id: black
        language_version: python3.10

  # Python 导入排序
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: ["--profile", "black"]

  # Python 代码检查
  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        args: [--config=backend/.flake8]

  # Python 类型检查
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        args:
          [
            --config-file=backend/pyproject.toml,
            --disable-error-code=var-annotated,
          ]
        additional_dependencies: ["django-stubs[mypy]"]
        files: ^backend/
        exclude: ^backend/(migrations|tests)/

  # Python 安全检查 (修复Windows编码问题)
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ["-r", "backend/apps/", "-f", "json", "-o", "bandit-report.json"]
        exclude: "tests|test_"
        additional_dependencies: ["pbr"]
        pass_filenames: false

  # JavaScript/TypeScript 代码格式化
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        files: \.(js|jsx|ts|tsx|json|css|scss|md|yml|yaml)$
        exclude: |
          (?x)^(
            docs/02_test_report/.*\.json$|
            docs/02_test_report/.*_report\.md$|
            .*temp_modifications.*\.json$|
            .*\.log$|
            .*\.report$
          )$

  # ESLint检查 - disabled due to configuration compatibility issues
  # - repo: https://github.com/pre-commit/mirrors-eslint
  #   rev: v8.53.0
  #   hooks:
  #     - id: eslint
  #       files: ^frontend/.*\.(js|jsx|ts|tsx|vue)$
  #       args:
  #         [
  #           "frontend/**/*.{js,ts,vue}",
  #           "--config",
  #           "frontend/.eslintrc.cjs",
  #           "--fix",
  #         ]
  #       additional_dependencies:
  #         - eslint@8.53.0
  #         - "@typescript-eslint/eslint-plugin@6.12.0"
  #         - "@typescript-eslint/parser@6.12.0"
  #         - "eslint-plugin-vue@9.18.1"

  # 🔍 重型检查最后执行
  # 全面代码质量检查 - 移到最后
  - repo: local
    hooks:
      - id: comprehensive-check
        name: Comprehensive code quality check
        entry: python scripts/code_change_tracker.py --validate-commit
        language: system
        pass_filenames: false
        always_run: true
        fail_fast: true

  # Docker 文件检查 - 通过Docker镜像执行，符合纯Docker开发原则
  - repo: local
    hooks:
      - id: hadolint-docker
        name: Hadolint Docker file linter
        entry: bash -c 'cat "$1" | docker run --rm -i hadolint/hadolint:v2.12.0 hadolint --ignore DL3008 --ignore DL3009 --ignore DL3015 --ignore DL3018 --ignore DL3059 --ignore DL4006 --ignore DL3013 -'
        language: system
        files: ^.*Dockerfile.*$
        pass_filenames: true
        args: ["--"]

  # 提交信息检查
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # 命名规则检查
  - repo: local
    hooks:
      - id: python-naming-check
        name: Python Naming Convention Check
        entry: sh -c 'if docker-compose ps backend | grep -q "Up"; then docker-compose exec -T backend python -m flake8 --select=N --config=/app/.flake8 /app/ || true; else echo "Skipping - backend not running"; fi'
        language: system
        files: ^backend/.*\.py$
        pass_filenames: false

      # Temporarily disabled due to missing pylint module
      # - id: python-pylint-naming
      #   name: Python Pylint Naming Check
      #   entry: python -m pylint --rcfile=backend/.pylintrc.naming --load-plugins=pylint.extensions.bad_builtin,pylint.extensions.check_elif,pylint.extensions.docparams,pylint.extensions.docstyle,pylint.extensions.empty_comment,pylint.extensions.mccabe,pylint.extensions.overlapping_exceptions,pylint.extensions.private_import,pylint.extensions.redefined_variable_type,pylint.extensions.typing,pylint.extensions.while_used --ignore=.venv,migrations,settings backend/apps/ backend/tests/
      #   language: system
      #   files: ^backend/(apps|tests)/.*\.py$
      #   pass_filenames: false

      - id: typescript-syntax-check
        name: TypeScript Syntax Check
        entry: sh -c 'echo "检查E2E TypeScript..." && cd e2e && npm run type-check && echo "E2E TypeScript语法检查通过"'
        language: system
        files: \.(ts|tsx|vue|json)$
        exclude: node_modules
        pass_filenames: false

      - id: github-actions-syntax-check
        name: GitHub Actions Workflow Syntax Check
        entry: sh -c 'echo "检查workflow语法..." && find .github/workflows -name "*.yml" -o -name "*.yaml" | xargs -I {} python -c "import yaml; yaml.safe_load(open(\"{}\", \"r\", encoding=\"utf-8\"))" && echo "语法检查通过"'
        language: system
        files: ^\.github/workflows/.*\.(yml|yaml)$
        pass_filenames: false

      # TypeScript命名检查 - 暂时禁用，需要前端服务运行
      # - id: typescript-naming-check
      #   name: TypeScript Naming Convention Check
      #   entry: sh -c 'docker-compose exec -T frontend npx eslint --config .eslintrc.cjs --no-fix'
      #   language: system
      #   files: ^frontend/src/.*\.(ts|tsx)$
      #   pass_filenames: true

      # - id: vue-naming-check
      #   name: Vue Naming Convention Check
      #   entry: sh -c 'docker-compose exec -T frontend npx eslint --config .eslintrc.cjs --no-fix'
      #   language: system
      #   files: ^frontend/src/.*\.vue$
      #   pass_filenames: true

  # 本地目录守卫钩子
  - repo: local
    hooks:
      - id: root-clutter
        name: Root Clutter Guard (strict)
        entry: >
          sh -c '
          FILES=$(git diff --cached --name-status | grep "^[AM]" | cut -f2- |
                  grep -E "^[^/]+\." |
                  grep -v -E "^\.|^(package|docker-compose|Dockerfile)" |
                  grep -v -E "^(setup|install|configure|build|deploy)\.(sh|py|js)$" |
                  grep -v -E "^(README|CODE_OF_CONDUCT|CONTRIBUTING|SECURITY|CHANGELOG|LICENSE)\.md$");
          if [ -n "$FILES" ]; then
            echo "❌ 禁止在根目录添加文件，只允许标准文档和安装脚本";
            echo "$FILES";
            echo "💡 允许的安装脚本: setup.sh, install.sh, configure.sh, build.sh, deploy.sh";
            exit 1;
          fi
          '
        language: system
        always_run: true
        fail_fast: true

  # 分支保护钩子
  - repo: local
    hooks:
      - id: branch-protection
        name: Branch Protection Check
        entry: sh scripts/branch_protection.sh
        language: system
        stages: [pre-push]
        always_run: true

      # 新增严格检查项
      - id: no-skip-verify
        name: Prevent --no-verify usage
        entry: sh -c 'if [ -f ".git/hooks/pre-commit" ]; then echo "[OK] Pre-commit hooks 已安装"; else echo "[ERROR] Pre-commit hooks 未安装或被绕过" && exit 1; fi'
        language: system
        stages: [pre-commit]
        pass_filenames: false
        always_run: true

      - id: file-size-check
        name: Large file check (strict)
        entry: sh -c 'git diff --cached --name-only | xargs -I {} find {} -type f -size +5M 2>/dev/null | head -1 | grep . && echo "❌ 文件超过5MB，请使用Git LFS" && exit 1 || exit 0'
        language: system
        always_run: true

      - id: security-scan
        name: Basic security scan
        entry: echo "[INFO] Security scan skipped - scanner removed for code quality"
        language: system
        pass_filenames: false
        always_run: true

      # 🛡️ NPM WORKSPACES 架构保护，防止依赖管理违规
      - id: npm-workspaces-guard
        name: NPM Workspaces Architecture Guard
        entry: python scripts/check_npm_workspaces.py
        language: system
        files: '\.(yml|yaml|py|js|json|sh|Makefile)$'
        pass_filenames: true
        description: "检查npm workspaces架构违规，防止子目录npm ci/install调用"

      # 🗂️ DELETABLE 文件元数据检查
      - id: file-metadata-check
        name: Deletable File Metadata Check
        entry: python scripts/file_metadata_checker.py
        language: system
        pass_filenames: true
        description: "检查带deletable标识的文件是否包含必需的元数据注释"

      # 🐳 DOCKER-COMPOSE 文件数量限制
      - id: docker-compose-limit
        name: Docker Compose Files Limit Guard
        entry: python scripts/check_docker_compose_limit.py
        language: system
        files: "^docker-compose.*\\.(yml|yaml)$"
        pass_filenames: false
        always_run: true
        description: "防止根目录docker-compose文件数量无限增长，保持配置简洁"

      # 🔒 SCRIPTS-GOLDEN 核心保护脚本守护
      - id: scripts-golden-protection
        name: Scripts-Golden Protection Guard
        entry: python scripts/protect_golden_scripts.py
        language: system
        files: "^scripts-golden/.*$"
        pass_filenames: true
        fail_fast: true
        description: "保护scripts-golden目录中的核心安全脚本，防止AI篡改"
