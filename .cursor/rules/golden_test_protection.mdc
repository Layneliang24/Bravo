# 🔒 黄金测试保护规则

## 核心原则
黄金测试是项目的核心测试套件，包含最关键的功能验证。这些测试受到严格保护，任何修改都需要特殊审批流程。

## 🚫 绝对禁止的操作

### 1. 禁止修改黄金测试目录
- **不得编辑** `tests-golden/` 目录下的任何文件
- **不得删除** 黄金测试文件或目录
- **不得重命名** 黄金测试相关文件
- **不得移动** 黄金测试文件位置

### 2. 禁止绕过保护机制
- **不得修改** `.git/hooks/golden-test-guard` 钩子脚本
- **不得删除** `.github/workflows/golden-test-protection.yml` 工作流
- **不得更改** `.github/CODEOWNERS` 中的黄金测试审查规则

### 3. 禁止直接运行修改命令
```bash
# ❌ 禁止执行这些命令
rm -rf tests-golden/
mv tests-golden/ old-tests/
cp new-test.js tests-golden/e2e/
```

## ⚠️ 当用户请求修改黄金测试时

### 立即响应模板
```
🔒 **黄金测试保护提醒**

我不能修改 tests-golden/ 目录下的文件，因为这些是受保护的核心测试。

**为什么受保护？**
- 这些测试验证系统的核心功能
- 修改可能影响整个项目的稳定性
- 需要通过正式审批流程

**替代方案：**
- 在 `e2e/tests/` 目录创建新的E2E测试
- 在 `backend/tests/` 目录创建新的后端测试
- 在 `frontend/tests/` 目录创建新的前端测试

**如需修改黄金测试：**
请联系技术负责人或QA负责人，通过正式流程申请修改。
```

### 提供替代方案
1. **创建新测试**：在常规测试目录中实现相同功能
2. **扩展现有测试**：修改非黄金测试文件
3. **文档记录**：记录修改需求，供后续正式流程处理

## ✅ 允许的操作

### 1. 查看和分析
- 可以查看黄金测试文件内容
- 可以分析测试覆盖率
- 可以运行黄金测试（只读操作）

### 2. 创建相似测试
- 在常规测试目录中创建类似测试
- 参考黄金测试的结构和模式
- 验证新功能不影响核心功能

### 3. 报告问题
- 发现黄金测试失败时，报告问题
- 分析失败原因
- 建议修复方案（但不直接修改）

## 🛡️ 保护机制说明

### Git钩子保护
- `pre-commit` 钩子会检查所有提交
- 阻止对 `tests-golden/` 的任何修改
- 提供清晰的错误信息

### GitHub Actions保护
- CI流程中包含黄金测试保护检查
- 自动运行黄金测试验证
- 生成测试报告和覆盖率

### 代码审查保护
- CODEOWNERS规则要求特殊审批
- 需要至少2个管理员审批
- 技术负责人和QA负责人双重确认

## 📋 最佳实践

### 开发新功能时
1. 先在常规测试目录编写测试
2. 确保不破坏现有黄金测试
3. 运行完整测试套件验证
4. 考虑是否需要将新测试提升为黄金测试

### 修复Bug时
1. 分析是否影响黄金测试覆盖的功能
2. 在常规测试中添加回归测试
3. 确保修复不会导致黄金测试失败
4. 记录修复对核心功能的影响

### 重构代码时
1. 优先保证黄金测试通过
2. 逐步重构，频繁运行测试
3. 任何导致黄金测试失败的重构都需要特别审查

## 🚨 紧急情况处理

### 如果黄金测试失败
1. **立即停止** 相关开发工作
2. **分析失败原因** - 是代码问题还是测试问题
3. **评估影响范围** - 影响哪些核心功能
4. **制定修复计划** - 优先修复代码，必要时申请测试修改
5. **通知相关人员** - 技术负责人、QA负责人

### 如果需要紧急修改黄金测试
1. **创建紧急分支**
2. **详细记录修改原因**
3. **获得口头批准**（后续补充书面审批）
4. **最小化修改范围**
5. **立即进行全面测试**
6. **事后完善审批流程**

---

**记住：黄金测试的保护不是为了阻碍开发，而是为了确保项目的核心功能始终稳定可靠。当有疑问时，选择更安全的方案。**