# Bravo项目开发规范

## 核心原则
1. **docker容器化开发**：不要使用宿主机进行开发测试，所有操作都在容器中进行并且优先使用国内源，包括构建，下载依赖，运行测试等。
2. **本地测试优先**：所有代码修改必须先本地测试通过，才能提交推送
3. **深入分析问题**：遇到错误要深入分析根本原因，不要表面修复
4. **系统性思维**：建立检查清单，一次性找出所有相关问题
5. **程序员思维**：思考->搜索->复现->修复->验证，要拍脑袋就以为自己找到了实际原因。
6. **工作准备**：开始工作前先理解对话上下文（若有），找到之前的思路和计划，避免重复工作。
7. **别想着简化问题**：不要想着简化问题，不要想着走捷径，不要想着采用浅显的解决方法，不要想着偷懒。
8. **表明身份**：每次对话，请标注是由哪个模型回答的，并给出真实模型名称。

## 开发流程规范

### 代码修改流程
1. **思考原因** → 2. **建立检查清单** → 3. **复现问题** → 4. **确认根因** → 5. **修改代码** → 6. **本地测试** → 7. **验证修复** → 8. **提交推送**
- ❌ 错误做法：修改代码 → 直接推送 → 让CI测试
- ✅ 正确做法：思考原因 → 建立检查清单 → 复现问题 → 确认根因 → 修改代码 → 本地docker测试 → 验证修复 → 提交推送

### 问题分析流程
1. **收集错误信息**：完整复制错误堆栈
2. **深入分析根本原因**：不要只看表面现象
3. **建立检查清单**：系统性排查所有可能问题
4. **一次性修复**：找出所有问题后统一修复
5. **本地验证**：确保修复有效

## 测试规范

### 本地测试要求
- 所有后端修改必须本地运行pytest验证
- 所有前端修改必须本地运行npm test验证
- 数据库相关修改必须本地连接数据库测试
- 配置修改必须本地验证配置生效

## 问题排查规范

### 系统性检查清单
遇到问题时，按以下清单系统性检查：

#### CI测试数量不足问题
- [ ] 检查pytest.ini中的--maxfail设置
- [ ] 检查所有CI工作流中的--maxfail设置
- [ ] 检查所有pytest命令是否显式指定--maxfail
- [ ] 检查是否有其他pytest配置文件
- [ ] 检查环境变量是否影响pytest行为
- [ ] 检查测试收集是否正常
- [ ] 检查数据库连接是否影响测试执行
- [ ] 检查MySQL用户权限配置

#### 数据库连接问题
- [ ] 检查Django设置中的HOST配置（127.0.0.1 vs localhost）
- [ ] 检查MySQL服务是否运行
- [ ] 检查用户权限是否正确配置
- [ ] 检查端口映射是否正确
- [ ] 检查环境变量是否正确设置

### 错误分析原则
1. **不要只看错误数量**：15个测试失败不等于只运行了1个测试
2. **分析错误类型**：数据库连接错误 vs 测试逻辑错误
3. **检查错误堆栈**：找到真正的根本原因
4. **验证修复效果**：修复后必须本地测试验证

## 代码质量规范

### 提交信息规范
- 必须包含问题分析过程
- 必须说明修复方案
- 必须说明预期结果
- 必须包含涉及文件列表

### 修复验证规范
- 修复后必须本地测试通过
- 修复后必须验证相关功能正常
- 修复后必须检查是否引入新问题

## 经验教训

### 常见错误模式
1. **表面修复**：只修复看到的错误，不深挖根本原因
2. **局部思维**：只关注当前报错，不检查相关配置
3. **依赖CI测试**：让CI帮忙测试，而不是本地验证
4. **挤牙膏式修复**：一个一个地修复，而不是系统性解决

### 正确做法
1. **系统性分析**：建立完整的检查清单
2. **全局搜索**：使用grep/find等工具全面搜索
3. **一次性修复**：找出所有问题后统一修复
4. **本地验证**：修复后立即本地测试验证


## 总结
- **本地测试是必须的**，不是可选的
- **深入分析是必要的**，不要表面修复
- **系统性思维是关键的**，不要局部思维
- **CI是验证工具**，不是测试工具