# Bravo项目开发规范

## 核心原则

### 核心信念
- **渐进式改进而非大刀阔斧** - 小幅修改，确保能编译并通过测试
- **从现有代码中学习** - 先研究和规划，再实施
- **实用主义而非教条主义** - 适应项目现实
- **清晰意图而非聪明代码** - 选择平实和明显的方案

### 简洁性意味着
- 每个函数/类只有单一职责
- 避免过早抽象
- 不要使用巧妙技巧 - 选择平实的解决方案
- 如果需要解释，说明太复杂了

## 流程

### 1. 规划与分阶段

将复杂工作分解为3-5个阶段。按照项目层级在 `DOCS/IMPLEMENTATION_PLAN.md` 中记录：
```markdown
## 阶段 N：[名称]
**目标**：[具体交付物]
**成功标准**：[可测试的结果]
**测试**：[具体测试用例]
**状态**：[未开始|进行中|完成]
```
- 根据进度更新状态
- 所有阶段完成后删除文件

### 2. 实施流程

1. **理解** - 研究代码库中的现有模式
2. **测试** - 先写测试（红色）
3. **实现** - 最少代码通过测试（绿色）
4. **验证** - 本地测试并验证修复
5. **提交** - 推送代码并触发CI

### 3. 遇到困难时（3次尝试后）

**关键**：每个问题最多尝试3次，然后停止。
1. **记录失败内容**：
   - 你尝试了什么
   - 具体的错误消息
   - 你认为失败的原因

2. **研究替代方案**：
   - 找到2-3个类似的实现
   - 注意使用的不同方法

3. **质疑基础**：
   - 这是正确的抽象层次吗？
   - 能否分解为更小的问题？
   - 是否有完全更简单的方法？

4. **尝试不同角度**：
   - 不同的库/框架特性？
   - 不同的架构模式？
   - 不同的设计原则？

5. **解决困难后**：
   - 记录解决困难的过程和结果到 `DOCS/FAQ.md` 中。

## 技术标准

### 架构原则
- **组合优于继承** - 使用依赖注入
- **接口优于单例** - 提高测试能力和灵活性
- **显式优于隐式** - 清晰的数据流和依赖关系
- **尽可能测试驱动** - 永远不要禁用测试，而是修复它们

### 代码质量

- **每次提交必须**：
  - 编译成功
  - 通过所有现有测试
  - 包含新功能的测试
  - 遵循项目格式化/语法检查规范

- **提交前**：
  - 运行格式化器/语法检查器
  - 自我审查修改
  - 确保提交消息解释"为什么"

### 错误处理

- 快速失败并提供描述性消息
- 包含调试上下文
- 在适当层级处理错误
- 永远不要静默吞掉异常

## 决策框架

当存在多个有效方法时，基于以下标准选择：

1. **可测试性** - 我能轻松测试这个吗？
2. **可读性** - 6个月后有人能理解这个吗？
3. **一致性** - 这符合项目模式吗？
4. **简洁性** - 这是最简单的可行解决方案吗？
5. **可逆性** - 以后修改有多困难？

## 项目集成

### 学习代码库

- 找到3个类似的功能/组件
- 识别通用模式和约定
- 尽可能使用相同的库/工具
- 遵循现有测试模式

### 工具

- 使用项目现有的构建系统
- 使用项目的测试框架
- 使用项目的格式化器/语法检查器设置
- 没有强有力的理由不要引入新工具
- 知晓你所掌握的工具，比如act，docker，git，github CLI等等，并合理使用。

## 质量关卡

### 完成定义

- [ ] 测试已编写并通过
- [ ] 代码遵循项目约定
- [ ] 无语法检查器/格式化器警告
- [ ] 提交消息清晰
- [ ] 实现符合计划
- [ ] 没有不带问题编号的TODO

### 测试指南

- 测试行为，不是实现
- 尽可能每个测试一个断言
- 清晰的测试名称描述场景
- 使用现有的测试工具/辅助函数
- 测试应该是确定性的

## 重要提醒
- **基础设施搭建**：工作前先检查基础设施，比如docker，mysql，redis，act，github CLI等，基础设施越完善，工作效率越高。
- **docker容器化开发**：不要使用宿主机进行开发测试，所有操作都在容器中进行并且优先使用国内源，包括构建，下载依赖，运行测试等。
- **虚拟环境开发**：避免污染系统环境，应使用虚拟环境
- **永远不要**：
  - 使用 `--no-verify` 绕过提交钩子
  - 禁用测试而不是修复它们
  - 提交无法编译的代码
  - 做假设 - 通过现有代码验证
- **始终**：
  - 逐步提交可工作的代码
  - 随时更新计划文档
  - 从现有实现中学习
  - 3次失败尝试后停止并重新评估
- **命令行交互**：不要进入python 交互环境。
- **表明身份**：每次对话，请标注是由哪个模型回答的，并给出真实模型名称。

## 教训

> 由AI填写，写一些通用的，行为准则方面的教训
### 规范遵守
- **绝不绕过项目规范**：遇到困难时修复问题，而不是绕过检查流程
- **深入分析根因**：不要只修复表面错误，要找到真正的问题源头
- **系统性解决问题**：建立检查清单，一次性找出所有相关问题

### 技术理解
- **理解工具上下文**：npm workspaces、容器环境等有特定的命令执行规则
- **本地验证优先**：所有修复都必须在本地环境验证通过再推送
- **从失败中学习**：每次错误都要记录原因和解决方案，避免重复犯错
