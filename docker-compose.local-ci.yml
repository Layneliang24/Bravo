# 本地CI测试环境
# Docker Compose file for local CI testing

services:
  # MySQL测试数据库
  mysql-test:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: bravo_test
      MYSQL_USER: bravo_user
      MYSQL_PASSWORD: bravo_password
    ports:
      - "3308:3306" # 避免与本地MySQL冲突
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-proot_password",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存（如果需要）
  redis-test:
    image: redis:7-alpine
    ports:
      - "6380:6379" # 避免与本地Redis冲突
    command: redis-server --requirepass test_password

  # 后端测试环境
  backend-test:
    build:
      context: ./backend
      dockerfile: Dockerfile.test
    environment:
      - DB_HOST=mysql-test
      - DB_PORT=3306
      - DB_NAME=bravo_test
      - DB_USER=bravo_user
      - DB_PASSWORD=bravo_password
      - REDIS_URL=redis://redis-test:6379/0
      - DJANGO_SETTINGS_MODULE=bravo.settings.test
    depends_on:
      mysql-test:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend-test-cache:/app/.cache
    working_dir: /app
    command: tail -f /dev/null # 保持容器运行

  # 前端测试环境
  frontend-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile.test
    volumes:
      - ./frontend:/app
      - frontend-test-cache:/app/node_modules
      - frontend-test-dist:/app/dist
    working_dir: /app
    ports:
      - "3001:3000" # 用于E2E测试
    command: tail -f /dev/null

  # E2E测试环境
  e2e-test:
    build:
      context: ./e2e
      dockerfile: Dockerfile.test
    volumes:
      - ./e2e:/app
      - e2e-test-cache:/app/node_modules
      - ./e2e/test-results:/app/test-results
    working_dir: /app
    environment:
      - TEST_BASE_URL=http://frontend-test:3000
      - API_BASE_URL=http://backend-test:8000
    depends_on:
      - frontend-test
      - backend-test
    command: tail -f /dev/null

  # Act Runner - 本地运行GitHub Actions
  act-runner:
    image: catthehacker/ubuntu:act-latest
    volumes:
      - .:/github/workspace
      - /var/run/docker.sock:/var/run/docker.sock
      - act-cache:/tmp/act
    working_dir: /github/workspace
    environment:
      - GITHUB_TOKEN=${GITHUB_TOKEN}
    command: tail -f /dev/null

volumes:
  backend-test-cache:
  frontend-test-cache:
  frontend-test-dist:
  e2e-test-cache:
  act-cache:
