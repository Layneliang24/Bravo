version: "3.8"

services:
  # 预配置的MySQL服务
  mysql-test:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: bravo_test
      MYSQL_USER: bravo_user
      MYSQL_PASSWORD: bravo_password
      MYSQL_ROOT_PASSWORD: root_password
    tmpfs:
      - /var/lib/mysql # 使用内存存储，加速测试
    command: --default-authentication-plugin=mysql_native_password --skip-log-bin
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "mysqladmin ping -h localhost && mysql -u root -proot_password -e 'USE bravo_test; SELECT 1;'",
        ]
      interval: 5s
      timeout: 5s
      retries: 15

  # 后端测试服务
  backend-test:
    build:
      context: ./backend
      dockerfile: Dockerfile.test
    depends_on:
      mysql-test:
        condition: service_healthy
    environment:
      DB_HOST: mysql-test
      DB_NAME: bravo_test
      DB_USER: bravo_user
      DB_PASSWORD: bravo_password
    volumes:
      - ./backend:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 5s
      timeout: 3s
      retries: 10

  # 前端构建服务 - 修复权限问题：不使用卷映射到主机
  frontend-build:
    build:
      context: ./frontend
      dockerfile: Dockerfile.test
    command:
      [
        "/bin/sh",
        "-c",
        "echo '🏗️ 开始前端构建...' && npm run build && echo '✅ 前端构建完成' && ls -la /app/dist/ && echo '📦 构建文件已生成到容器内 /app/dist/' && echo '📋 构建文件清单:' && find /app/dist -type f | head -10",
      ]
    restart: "no" # 构建完成后不重启

  # 前端测试服务 - 修复方案：独立构建，不依赖卷映射
  frontend-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile.test
    depends_on:
      frontend-build:
        condition: service_completed_successfully
    ports:
      - "3001:3000"
    environment:
      VITE_API_URL: http://backend-test:8000
      PORT: 3000
    command:
      [
        "/bin/sh",
        "-c",
        "echo '🚀 启动前端测试服务...' && echo '🔧 容器内独立构建前端项目...' && npm run build && echo '📁 检查构建文件目录...' && ls -la /app/dist/ || echo '⚠️ 构建目录检查失败' && if [ -d '/app/dist' ] && [ -f '/app/dist/index.html' ]; then echo '✅ 找到构建文件，使用 Vite preview 模式' && npm run preview -- --host 0.0.0.0 --port 3000; else echo '❌ 构建失败，回退到开发模式' && npm run dev -- --host 0.0.0.0 --port 3000; fi",
      ]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 30s

  # E2E测试服务
  e2e-tests:
    build:
      context: ./e2e
      dockerfile: Dockerfile.test
    depends_on:
      backend-test:
        condition: service_healthy
      frontend-test:
        condition: service_healthy
    volumes:
      - ./e2e:/app
    environment:
      BACKEND_URL: http://backend-test:8000
      FRONTEND_URL: http://frontend-test:3000
      TEST_BASE_URL: http://frontend-test:3000
      CI: "true"
    command:
      - /bin/sh
      - -c
      - |
        echo '⏳ 等待所有服务就绪...'
        echo '🔗 测试服务连通性...'
        until curl -s http://backend-test:8000/health/; do
          echo "等待后端服务..."; sleep 3
        done
        echo '✅ 后端服务已就绪'
        until curl -s http://frontend-test:3000/; do
          echo "等待前端服务..."; sleep 3
        done
        echo '✅ 前端服务已就绪'
        echo '🔍 详细服务状态验证...'
        echo "后端健康检查: $(curl -s http://backend-test:8000/health/)"
        echo "前端首页响应: $(curl -s http://frontend-test:3000/ | head -c 200)"
        echo "环境变量: TEST_BASE_URL=$TEST_BASE_URL, FRONTEND_URL=$FRONTEND_URL"
        echo "当前工作目录: $(pwd)"
        echo "Playwright配置: $(cat playwright.config.ts | grep baseURL || echo '未找到baseURL配置')"
        echo '🧪 运行关键E2E测试...'
        npm run test -- --grep '@critical' --project=chromium --reporter=list --verbose
