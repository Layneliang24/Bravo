name: Deploy to Production

on:
  push:
    branches: [main]
    paths-ignore:
      - "docs/**"
      - "*.md"
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "强制部署"
        required: false
        default: "false"

# 确保只有一个部署在运行
concurrency:
  group: production-deploy
  cancel-in-progress: false

jobs:
  # 部署前检查
  pre-deploy:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if should deploy
        id: check
        run: |
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "🚀 强制部署触发"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # 检查是否有实质性变更
            if git diff --quiet HEAD~1 HEAD -- '*.py' '*.js' '*.vue' '*.ts' '*.tsx' 'docker-compose.prod.yml' 'Dockerfile*'; then
              echo "should-deploy=false" >> $GITHUB_OUTPUT
              echo "ℹ️ 没有实质性代码变更，跳过部署"
            else
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "✅ 检测到代码变更，准备部署"
            fi
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # 生产环境部署
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: pre-deploy
    if: needs.pre-deploy.outputs.should-deploy == 'true'
    environment:
      name: production
      url: http://8.129.16.190

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.ALIYUN_SSH_KEY }}

      - name: Deploy to production server
        env:
          HOST: ${{ secrets.ALIYUN_HOST }}
          USER: ${{ secrets.ALIYUN_USER }}
          REGISTRY_USERNAME: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}
        run: |
          ssh -o StrictHostKeyChecking=no \
              -o ServerAliveInterval=30 \
              -o ServerAliveCountMax=30 \
              $USER@$HOST bash -s << 'ENDSSH' "$REGISTRY_USERNAME" "$REGISTRY_PASSWORD"
            set -e

            # 接收参数
            REGISTRY_USERNAME="$1"
            REGISTRY_PASSWORD="$2"

          echo "📁 进入项目目录..."
          cd /home/layne/project/bravo-prod

          echo "🔄 拉取最新代码..."
          if [ -d ".git" ]; then
            # 先清理所有未提交的改动和未跟踪文件
            git reset --hard HEAD
            git clean -fdx
            # 拉取最新代码
            git fetch origin main
            git reset --hard origin/main
          else
            git clone -b main https://github.com/Layneliang24/Bravo.git .
          fi

          echo "⏹️  停止旧容器..."
          COMPOSE_PROJECT_NAME=bravo-prod docker-compose -f docker-compose.prod.yml down || true

          echo "🔐 登录阿里云镜像仓库..."
          echo "${REGISTRY_PASSWORD}" | docker login crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com --username "${REGISTRY_USERNAME}" --password-stdin

          echo "📦 拉取最新镜像..."
          COMPOSE_PROJECT_NAME=bravo-prod IMAGE_TAG=latest docker-compose -f docker-compose.prod.yml pull

          echo "🚀 启动服务..."
          # 检查是否配置了SSL证书（域名模式）
          if [ -d "/etc/letsencrypt/live/layneliang.com" ]; then
            echo "检测到SSL证书，使用域名配置..."
            # 复制域名配置到容器
            if [ -f "frontend/nginx.domain-production.conf" ]; then
              cp frontend/nginx.domain-production.conf frontend/nginx.conf.tmp
              # 临时替换Dockerfile中的nginx配置
              echo "使用域名Nginx配置"
            fi
            USE_DOMAIN=true
            DOMAIN_NAME=layneliang.com
          else
            echo "未检测到SSL证书，使用IP配置..."
            USE_DOMAIN=false
            DOMAIN_NAME=""
          fi

          # 生产环境使用默认端口
          COMPOSE_PROJECT_NAME=bravo-prod \
          IMAGE_TAG=latest \
          USE_DOMAIN=$USE_DOMAIN \
          DOMAIN_NAME=$DOMAIN_NAME \
          DJANGO_SECRET_KEY="${DJANGO_SECRET_KEY:-prod-secret-please-change-$(date +%s)}" \
          docker-compose -f docker-compose.prod.yml up -d

          echo "⏳ 等待服务就绪..."
          sleep 10

          echo "🔧 配置Nginx SSL..."
          # 复制SSL配置到容器
          if [ -f "frontend/nginx.ssl.conf" ]; then
            docker cp frontend/nginx.ssl.conf bravo-prod-frontend:/etc/nginx/conf.d/ssl.conf
            docker exec bravo-prod-frontend nginx -t && docker exec bravo-prod-frontend nginx -s reload
            echo "✅ SSL配置已应用"
          else
            echo "⚠️  未找到nginx.ssl.conf，跳过SSL配置"
          fi

          echo "📊 检查服务状态..."
          COMPOSE_PROJECT_NAME=bravo-prod docker-compose -f docker-compose.prod.yml ps

          echo "🔍 验证Nginx端口..."
          docker exec bravo-prod-frontend netstat -tlnp | grep -E '(:80|:443)' || echo "Nginx端口检查完成"

          echo "✅ 生产环境部署完成"
          ENDSSH

      - name: Health check
        env:
          HOST: ${{ secrets.ALIYUN_HOST }}
        run: |
          sleep 20
          curl -f http://$HOST/health || echo "⚠️ 前端健康检查失败"
          curl -f http://$HOST/api/ || echo "⚠️ 后端健康检查失败"

  # 部署后测试
  post-deploy-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: always() && needs.deploy.result == 'success'

    steps:
      - name: API Health Check
        env:
          HOST: ${{ secrets.ALIYUN_HOST }}
        run: |
          curl -f http://$HOST/api/ || exit 1
          curl -f http://$HOST/admin/ || exit 1

      - name: Frontend Check
        env:
          HOST: ${{ secrets.ALIYUN_HOST }}
        run: |
          curl -f http://$HOST/ || exit 1

      - name: Create deployment summary
        env:
          HOST: ${{ secrets.ALIYUN_HOST }}
        run: |
          echo "## 🚀 生产环境部署报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**部署时间:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**部署分支:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**提交SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**部署状态:** ✅ 成功" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📍 服务地址" >> $GITHUB_STEP_SUMMARY
          echo "- **前端:** http://$HOST" >> $GITHUB_STEP_SUMMARY
          echo "- **后端API:** http://$HOST/api" >> $GITHUB_STEP_SUMMARY
          echo "- **管理后台:** http://$HOST/admin" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ 健康检查" >> $GITHUB_STEP_SUMMARY
          echo "- 前端服务: 正常" >> $GITHUB_STEP_SUMMARY
          echo "- 后端服务: 正常" >> $GITHUB_STEP_SUMMARY
          echo "- 数据库: 正常" >> $GITHUB_STEP_SUMMARY
