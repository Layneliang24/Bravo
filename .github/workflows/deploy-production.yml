name: Deploy to Production

on:
  # 在镜像构建完成后自动触发
  workflow_run:
    workflows: ["🐳 Build and Push Docker Images"]
    types:
      - completed
    branches: [main]
  # 保留手动触发选项
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "强制部署"
        required: false
        default: "false"

# 确保只有一个部署在运行
concurrency:
  group: production-deploy
  cancel-in-progress: false

jobs:
  # 部署前检查
  pre-deploy:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    # 只有在镜像构建成功或手动触发时才执行
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if should deploy
        id: check
        run: |
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "🚀 强制部署触发"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # 检查是否有实质性变更
            if git diff --quiet HEAD~1 HEAD -- '*.py' '*.js' '*.vue' '*.ts' '*.tsx' 'docker-compose.prod.yml' 'Dockerfile*'; then
              echo "should-deploy=false" >> $GITHUB_OUTPUT
              echo "ℹ️ 没有实质性代码变更，跳过部署"
            else
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "✅ 检测到代码变更，准备部署"
            fi
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # 生产环境部署
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: pre-deploy
    if: needs.pre-deploy.outputs.should-deploy == 'true'
    environment:
      name: production
      url: http://8.129.16.190

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.ALIYUN_SSH_KEY }}

      - name: Get Current Deployment Info
        id: current-version
        env:
          HOST: ${{ secrets.ALIYUN_HOST }}
          USER: ${{ secrets.ALIYUN_USER }}
        run: |
          echo "📋 获取当前部署信息..."
          CURRENT_INFO=$(ssh -o StrictHostKeyChecking=no $USER@$HOST \
            "cd /home/layne/project/bravo-prod && \
             if [ -f .deployment-current ]; then cat .deployment-current; else echo 'FIRST_DEPLOY=true'; fi" || echo "FIRST_DEPLOY=true")

          echo "当前部署信息:"
          echo "$CURRENT_INFO"
          echo "current_info<<EOF" >> $GITHUB_OUTPUT
          echo "$CURRENT_INFO" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Deploy to production server
        id: deploy
        env:
          HOST: ${{ secrets.ALIYUN_HOST }}
          USER: ${{ secrets.ALIYUN_USER }}
          REGISTRY_USERNAME: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}
        run: |
          ssh -o StrictHostKeyChecking=no \
              -o ServerAliveInterval=30 \
              -o ServerAliveCountMax=30 \
              $USER@$HOST bash -s << 'ENDSSH' "$REGISTRY_USERNAME" "$REGISTRY_PASSWORD"
            set -e

            # 接收参数
            REGISTRY_USERNAME="$1"
            REGISTRY_PASSWORD="$2"

          echo "📁 进入项目目录..."
          cd /home/layne/project/bravo-prod

          # 备份当前版本信息
          echo "💾 备份当前部署信息..."
          if [ -f .deployment-current ]; then
            # 将当前版本保存为上一个版本
            cp .deployment-current .deployment-previous

            # 读取当前版本并备份镜像
            CURRENT_BACKEND_IMAGE=$(docker inspect bravo-prod-backend --format='{{.Config.Image}}' 2>/dev/null || echo "none")
            CURRENT_FRONTEND_IMAGE=$(docker inspect bravo-prod-frontend --format='{{.Config.Image}}' 2>/dev/null || echo "none")

            echo "📋 当前运行版本:"
            echo "  Backend:  $CURRENT_BACKEND_IMAGE"
            echo "  Frontend: $CURRENT_FRONTEND_IMAGE"

            # 给当前镜像打backup标签（本地保留）
            if [ "$CURRENT_BACKEND_IMAGE" != "none" ]; then
              docker tag "$CURRENT_BACKEND_IMAGE" bravo-backend-backup:latest || true
              docker tag "$CURRENT_FRONTEND_IMAGE" bravo-frontend-backup:latest || true
              echo "✅ 已为当前镜像打上backup标签"
            fi
          else
            echo "ℹ️  首次部署，无需备份"
          fi

          echo "🔄 拉取最新代码..."
          if [ -d ".git" ]; then
            # 先清理所有未提交的改动和未跟踪文件
            git reset --hard HEAD
            git clean -fdx
            # 强制更新远程分支信息
            git fetch --force --prune origin
            git reset --hard origin/main
          else
            git clone -b main https://github.com/Layneliang24/Bravo.git .
          fi

          echo "⏹️  停止旧容器..."
          COMPOSE_PROJECT_NAME=bravo-prod docker-compose -f docker-compose.prod.yml down || true

          echo "🔐 登录阿里云镜像仓库..."
          echo "${REGISTRY_PASSWORD}" | docker login crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com --username "${REGISTRY_USERNAME}" --password-stdin

          echo "📦 拉取最新镜像..."
          COMPOSE_PROJECT_NAME=bravo-prod IMAGE_TAG=latest docker-compose -f docker-compose.prod.yml pull

          # 记录新版本信息
          echo "📝 记录新版本信息..."
          NEW_BACKEND_DIGEST=$(docker inspect crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/backend:latest --format='{{index .RepoDigests 0}}' 2>/dev/null || echo "unknown")
          NEW_VERSION=$(date +%Y-%m-%d_%H:%M:%S)

          {
            echo "DEPLOY_TIME=$NEW_VERSION"
            echo "BACKEND_IMAGE=crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/backend:latest"
            echo "FRONTEND_IMAGE=crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/frontend:latest"
            echo "BACKEND_DIGEST=$NEW_BACKEND_DIGEST"
            echo "GITHUB_SHA=${{ github.sha }}"
            echo "GITHUB_RUN_ID=${{ github.run_id }}"
            echo "GITHUB_ACTOR=${{ github.actor }}"
          } > .deployment-current

          echo "🚀 启动服务..."
          # 检查是否配置了SSL证书（域名模式）
          if [ -d "/etc/letsencrypt/live/layneliang.com" ]; then
            echo "检测到SSL证书，使用域名配置..."
            # 复制域名配置到容器
            if [ -f "frontend/nginx.domain-production.conf" ]; then
              cp frontend/nginx.domain-production.conf frontend/nginx.conf.tmp
              # 临时替换Dockerfile中的nginx配置
              echo "使用域名Nginx配置"
            fi
            USE_DOMAIN=true
            DOMAIN_NAME=layneliang.com
          else
            echo "未检测到SSL证书，使用IP配置..."
            USE_DOMAIN=false
            DOMAIN_NAME=""
          fi

          # 生产环境使用默认端口
          COMPOSE_PROJECT_NAME=bravo-prod \
          IMAGE_TAG=latest \
          USE_DOMAIN=$USE_DOMAIN \
          DOMAIN_NAME=$DOMAIN_NAME \
          DJANGO_SECRET_KEY="${DJANGO_SECRET_KEY:-prod-secret-please-change-$(date +%s)}" \
          docker-compose -f docker-compose.prod.yml up -d

          echo "⏳ 等待服务就绪..."
          sleep 10

          echo "🔧 配置Nginx SSL..."
          # 复制生产环境SSL配置到容器
          if [ -f "frontend/nginx.domain-production.conf" ]; then
            docker cp frontend/nginx.domain-production.conf bravo-prod-frontend:/etc/nginx/conf.d/default.conf
            docker exec bravo-prod-frontend nginx -t && docker exec bravo-prod-frontend nginx -s reload
            echo "✅ 生产环境SSL配置已应用（layneliang.com）"
          else
            echo "⚠️  未找到nginx.domain-production.conf，跳过SSL配置"
          fi

          echo "📊 检查服务状态..."
          COMPOSE_PROJECT_NAME=bravo-prod docker-compose -f docker-compose.prod.yml ps

          echo "🔍 验证Nginx端口..."
          docker exec bravo-prod-frontend netstat -tlnp | grep -E '(:80|:443)' || echo "Nginx端口检查完成"

          echo "✅ 部署步骤完成，等待健康检查..."
          ENDSSH

      - name: Enhanced Health Check with Auto Rollback
        id: health-check
        if: always()
        env:
          HOST: ${{ secrets.ALIYUN_HOST }}
          USER: ${{ secrets.ALIYUN_USER }}
          REGISTRY_USERNAME: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}
        run: |
          ssh -o StrictHostKeyChecking=no $USER@$HOST bash -s << 'ENDSSH' "$REGISTRY_USERNAME" "$REGISTRY_PASSWORD"
            set -e

            REGISTRY_USERNAME="$1"
            REGISTRY_PASSWORD="$2"

            echo "🏥 开始增强健康检查..."
            cd /home/layne/project/bravo-prod

            # 健康检查函数
            check_health() {
              local retry=0
              local max_retry=5

              while [ $retry -lt $max_retry ]; do
                echo "🔍 健康检查 ($((retry+1))/$max_retry)..."

                # 检查容器状态
                if ! docker ps | grep -q bravo-prod-backend; then
                  echo "❌ Backend容器未运行"
                  retry=$((retry+1))
                  sleep 10
                  continue
                fi

                if ! docker ps | grep -q bravo-prod-frontend; then
                  echo "❌ Frontend容器未运行"
                  retry=$((retry+1))
                  sleep 10
                  continue
                fi

                # 检查前端（检查HTTP状态码）
                FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/ || echo "000")
                if [ "$FRONTEND_STATUS" != "200" ]; then
                  echo "⚠️ 前端健康检查失败 (状态码: $FRONTEND_STATUS)"
                  retry=$((retry+1))
                  sleep 10
                  continue
                fi

                # 检查后端API
                BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/api/ || echo "000")
                if [ "$BACKEND_STATUS" != "200" ]; then
                  echo "⚠️ 后端API健康检查失败 (状态码: $BACKEND_STATUS)"
                  retry=$((retry+1))
                  sleep 10
                  continue
                fi

                # 所有检查通过
                echo "✅ 健康检查通过"
                echo "  - Frontend: $FRONTEND_STATUS"
                echo "  - Backend API: $BACKEND_STATUS"
                return 0
              done

              echo "❌ 健康检查失败（重试${max_retry}次）"
              return 1
            }

            # 执行健康检查
            if check_health; then
              echo "🎉 新版本部署成功！"

              # 登录镜像仓库以更新stable标签
              echo "${REGISTRY_PASSWORD}" | docker login crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com --username "${REGISTRY_USERNAME}" --password-stdin

              # 更新stable标签（标记为稳定版本）
              echo "🏷️  更新prod-stable标签..."
              docker tag crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/backend:latest \
                         crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/backend:prod-stable || true
              docker tag crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/frontend:latest \
                         crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/frontend:prod-stable || true

              # 推送stable标签到远程仓库（可选，用于远程回滚）
              docker push crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/backend:prod-stable || echo "⚠️ 推送backend stable标签失败"
              docker push crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/frontend:prod-stable || echo "⚠️ 推送frontend stable标签失败"

              # 记录到部署历史
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] 部署成功 - GitHub SHA: ${{ github.sha }} - Run ID: ${{ github.run_id }}" >> .deployment-history

              exit 0
            else
              echo "🚨 健康检查失败，开始自动回滚..."

              # 检查是否有备份可以回滚
              if [ ! -f .deployment-previous ]; then
                echo "❌ 没有可回滚的版本（首次部署失败）"
                echo "[$(date '+%Y-%m-%d %H:%M:%S')] 首次部署失败 - 无法回滚 - GitHub SHA: ${{ github.sha }}" >> .deployment-history
                exit 1
              fi

              echo "📋 读取上一个版本信息..."
              if [ -f .deployment-previous ]; then
                cat .deployment-previous
              fi

              echo "⏹️  停止失败的容器..."
              COMPOSE_PROJECT_NAME=bravo-prod docker-compose -f docker-compose.prod.yml down

              echo "🔄 使用备份镜像回滚..."
              # 使用backup标签（本地备份）
              if docker images | grep -q bravo-backend-backup; then
                docker tag bravo-backend-backup:latest crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/backend:latest
                docker tag bravo-frontend-backup:latest crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/frontend:latest
                echo "✅ 使用本地备份镜像"
              else
                # 从镜像仓库拉取stable版本
                echo "⬇️ 从镜像仓库拉取stable版本..."
                echo "${REGISTRY_PASSWORD}" | docker login crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com --username "${REGISTRY_USERNAME}" --password-stdin
                docker pull crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/backend:prod-stable || echo "⚠️ 拉取backend stable失败"
                docker pull crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/frontend:prod-stable || echo "⚠️ 拉取frontend stable失败"
                docker tag crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/backend:prod-stable \
                           crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/backend:latest
                docker tag crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/frontend:prod-stable \
                           crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/frontend:latest
                echo "✅ 使用镜像仓库stable版本"
              fi

              echo "🚀 重新启动旧版本..."
              COMPOSE_PROJECT_NAME=bravo-prod IMAGE_TAG=latest docker-compose -f docker-compose.prod.yml up -d

              sleep 30

              # 验证回滚是否成功
              if check_health; then
                echo "✅ 回滚成功，服务已恢复到上一个版本"
                echo "[$(date '+%Y-%m-%d %H:%M:%S')] 部署失败，已自动回滚 - GitHub SHA: ${{ github.sha }}" >> .deployment-history

                # 恢复.deployment-current
                cp .deployment-previous .deployment-current
              else
                echo "🚨🚨🚨 严重错误：回滚也失败了！"
                echo "请立即检查服务器状态并人工介入！"
                echo "[$(date '+%Y-%m-%d %H:%M:%S')] 部署失败且回滚失败 - 需要人工介入 - GitHub SHA: ${{ github.sha }}" >> .deployment-history
              fi

              exit 1
            fi
          ENDSSH

  # 部署后测试
  post-deploy-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: always() && needs.deploy.result == 'success'

    steps:
      - name: API Health Check
        env:
          HOST: ${{ secrets.ALIYUN_HOST }}
        run: |
          curl -f http://$HOST/api/ || exit 1
          curl -f http://$HOST/admin/ || exit 1

      - name: Frontend Check
        env:
          HOST: ${{ secrets.ALIYUN_HOST }}
        run: |
          curl -f http://$HOST/ || exit 1

      - name: Create deployment summary
        env:
          HOST: ${{ secrets.ALIYUN_HOST }}
        run: |
          echo "## 🚀 生产环境部署报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**部署时间:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**部署分支:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**提交SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**部署状态:** ✅ 成功" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📍 服务地址" >> $GITHUB_STEP_SUMMARY
          echo "- **前端:** http://$HOST" >> $GITHUB_STEP_SUMMARY
          echo "- **后端API:** http://$HOST/api" >> $GITHUB_STEP_SUMMARY
          echo "- **管理后台:** http://$HOST/admin" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ 健康检查" >> $GITHUB_STEP_SUMMARY
          echo "- 前端服务: 正常" >> $GITHUB_STEP_SUMMARY
          echo "- 后端服务: 正常" >> $GITHUB_STEP_SUMMARY
          echo "- 数据库: 正常" >> $GITHUB_STEP_SUMMARY
