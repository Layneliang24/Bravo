name: Dev Branch - Post-Merge Validation

on:
  push:
    branches: [dev]
    # 只在合并提交时触发
  workflow_dispatch:

# 并发控制
concurrency:
  group: dev-merge-${{ github.ref }}
  cancel-in-progress: false # 合并后验证不应该被取消

jobs:
  # Dev分支验证（移除复杂的合并检测，直接对所有dev推送运行验证）

  # 合并后的快速烟雾测试
  post-merge-smoke:
    name: Post-Merge Smoke Tests
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    timeout-minutes: 8

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: bravo_test
          MYSQL_USER: bravo_user
          MYSQL_PASSWORD: bravo_password
          MYSQL_ROOT_PASSWORD: root_password
        options: --health-cmd="mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot_password" --health-interval=10s --health-timeout=5s --health-retries=5
        ports:
          - 3306:3306

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Dependencies
        run: |
          echo "📦 快速安装依赖..."
          npm ci --workspace=frontend
          cd backend && pip install -r requirements/test.txt

      - name: Quick Frontend Test
        run: |
          echo "🧪 快速前端测试..."
          npm run test:ci --workspace=frontend

      - name: Quick Backend Test
        working-directory: ./backend
        run: |
          echo "🧪 快速后端测试..."
          # 等待数据库准备就绪
          until mysqladmin ping -h 127.0.0.1 -P 3306 -u bravo_user -pbravo_password --silent; do
            echo "等待MySQL启动..."
            sleep 2
          done
          # 运行迁移
          python manage.py migrate --noinput --settings=bravo.settings.test
          # 运行测试
          python manage.py test --settings=bravo.settings.test --keepdb --parallel 2 tests.quick
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: bravo_test
          DB_USER: bravo_user
          DB_PASSWORD: bravo_password

      - name: Integration Smoke Test
        run: |
          echo "🧪 集成烟雾测试..."
          # 等待数据库完全准备就绪
          echo "⏳ 等待数据库连接..."
          until mysqladmin ping -h 127.0.0.1 -P 3306 -u bravo_user -pbravo_password --silent; do
            echo "等待MySQL启动..."
            sleep 2
          done
          echo "✅ 数据库连接成功"

          # 运行数据库迁移
          cd backend
          echo "🔄 运行数据库迁移..."
          python manage.py migrate --noinput

          # 启动服务
          echo "🚀 启动Django服务..."
          python manage.py runserver 8000 &
          SERVER_PID=$!

          # 等待服务启动
          echo "⏳ 等待服务启动..."
          for i in {1..30}; do
            if curl -s http://localhost:8000/health/ > /dev/null; then
              echo "✅ 服务启动成功"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ 服务启动超时"
              kill $SERVER_PID 2>/dev/null || true
              exit 1
            fi
            sleep 1
          done

          # 基本API测试
          curl -f http://localhost:8000/health/ || exit 1
          echo "✅ 服务健康检查通过"

          # 清理
          kill $SERVER_PID 2>/dev/null || true
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: bravo_test
          DB_USER: bravo_user
          DB_PASSWORD: bravo_password

  # 合并冲突检测
  conflict-detection:
    name: Merge Conflict Detection
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for Merge Conflicts Markers
        run: |
          echo "🔍 检查合并冲突标记..."

          # 检查是否有合并冲突标记残留
          if grep -r "<<<<<<< HEAD\|>>>>>>> \|=======" --include="*.py" --include="*.js" --include="*.vue" --include="*.ts" .; then
            echo "❌ 发现合并冲突标记残留!"
            echo "请手动解决这些冲突标记"
            exit 1
          else
            echo "✅ 未发现合并冲突标记"
          fi

      - name: Check File Conflicts
        run: |
          echo "🔍 检查潜在文件冲突..."

          # 检查是否有重复的文件（比如 file.py 和 file.py.orig）
          duplicates=$(find . -name "*.orig" -o -name "*.rej" -o -name "*.bak")
          if [ -n "$duplicates" ]; then
            echo "❌ 发现冲突备份文件:"
            echo "$duplicates"
            echo "请清理这些文件"
            exit 1
          else
            echo "✅ 未发现冲突备份文件"
          fi

  # 依赖冲突检测
  dependency-validation:
    name: Dependency Conflict Check
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    timeout-minutes: 6
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Check NPM Dependencies
        working-directory: ./frontend
        run: |
          echo "📦 检查NPM依赖冲突..."

          # 检查前端依赖
          npm ci --dry-run

          # 检查依赖漏洞
          npm audit --audit-level=high

          echo "✅ NPM依赖检查完成"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Check Python Dependencies
        working-directory: ./backend
        run: |
          echo "📦 检查Python依赖冲突..."

          # 检查requirements文件
          pip install --dry-run -r requirements/base.txt
          pip install --dry-run -r requirements/test.txt

          # 检查依赖冲突
          pip check || echo "⚠️ 发现Python依赖冲突"

          echo "✅ Python依赖检查完成"

  # 代码质量下降检测
  quality-regression:
    name: Quality Regression Check
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Analysis Tools
        run: |
          npm install -g jscpd # 代码重复检测
          pip install flake8 pylint # Python代码质量

      - name: Code Duplication Check
        run: |
          echo "🔍 检查代码重复..."

          # 检查前端代码重复
          jscpd frontend/src --threshold 5 --format html --output ./duplication-report.html

          # 检查后端代码重复
          # Python重复检测可以用其他工具

          echo "✅ 代码重复检查完成"

      - name: Code Complexity Check
        working-directory: ./backend
        run: |
          echo "🔍 检查代码复杂度..."

          # 使用flake8检查复杂度
          flake8 --max-complexity=10 . || echo "⚠️ 发现高复杂度代码"

          echo "✅ 代码复杂度检查完成"

  # 合并后汇总报告
  merge-validation-summary:
    name: Dev Validation Summary
    runs-on: ubuntu-latest
    needs:
      [
        post-merge-smoke,
        conflict-detection,
        dependency-validation,
        quality-regression,
      ]
    if: always() && github.ref == 'refs/heads/dev'
    steps:
      - name: Generate Merge Report
        run: |
          echo "## 🔄 Dev Branch Merge Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Merge Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Ref:** ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "**Merged By:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # 收集验证结果
          SMOKE_STATUS="${{ needs.post-merge-smoke.result }}"
          CONFLICT_STATUS="${{ needs.conflict-detection.result }}"
          DEPENDENCY_STATUS="${{ needs.dependency-validation.result }}"
          QUALITY_STATUS="${{ needs.quality-regression.result }}"

          echo "| Validation Check | Status | Impact |" >> $GITHUB_STEP_SUMMARY
          echo "|------------------|---------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Post-Merge Smoke Tests | $SMOKE_STATUS | 🔥 Critical |" >> $GITHUB_STEP_SUMMARY
          echo "| Conflict Detection | $CONFLICT_STATUS | 🔥 Critical |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Validation | $DEPENDENCY_STATUS | ⚠️ Important |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Regression | $QUALITY_STATUS | 📊 Monitor |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # 判断合并验证结果
          if [[ "$SMOKE_STATUS" == "success" && "$CONFLICT_STATUS" == "success" ]]; then
            echo "✅ **Merge validation PASSED!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 合并成功，dev分支状态良好" >> $GITHUB_STEP_SUMMARY
            echo "🚀 可以继续在dev分支上开发" >> $GITHUB_STEP_SUMMARY

            if [[ "$DEPENDENCY_STATUS" != "success" ]]; then
              echo "⚠️ 依赖验证有警告，请检查" >> $GITHUB_STEP_SUMMARY
            fi

            if [[ "$QUALITY_STATUS" != "success" ]]; then
              echo "📊 代码质量有下降，建议改进" >> $GITHUB_STEP_SUMMARY
            fi

            echo "Merge validation completed successfully"
          else
            echo "❌ **Merge validation FAILED!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "💥 合并后验证失败" >> $GITHUB_STEP_SUMMARY
            echo "🚨 需要立即修复关键问题" >> $GITHUB_STEP_SUMMARY
            echo "🔧 建议创建紧急修复PR" >> $GITHUB_STEP_SUMMARY
            echo "Merge validation failed"
            exit 1
          fi

      - name: Merge Status Notification
        run: |
          echo "📍 Dev Branch Merge Summary:"
          echo "   - Merge Commit: ${{ github.sha }}"
          echo "   - Branch: ${{ github.ref_name }}"
          echo "   - Actor: ${{ github.actor }}"
          echo "   - Status: Validation completed"
