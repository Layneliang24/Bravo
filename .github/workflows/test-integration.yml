name: Integration Tests

on:
  workflow_call:
    inputs:
      timeout:
        description: "Job timeout in minutes"
        type: number
        default: 12

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"
  MYSQL_DATABASE: bravo_test
  MYSQL_USER: bravo_user
  MYSQL_PASSWORD: bravo_password
  MYSQL_ROOT_PASSWORD: root_password

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout }}

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: bravo_test
          MYSQL_USER: bravo_user
          MYSQL_PASSWORD: bravo_password
          MYSQL_ROOT_PASSWORD: root_password
        options: --health-cmd="mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot_password" --health-interval=10s --health-timeout=5s --health-retries=10
        ports:
          - 3306:3306

      redis:
        image: redis:7-alpine
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore Dependencies
        uses: actions/cache@v4
        with:
          path: |
            frontend/node_modules
            backend/.venv
            ~/.cache/pip
            ~/.npm
          key: all-deps-v2-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json', 'backend/requirements/*.txt') }}
          restore-keys: |
            frontend-deps-v2-${{ runner.os }}-
            backend-deps-v2-${{ runner.os }}-

      - name: Install Dependencies (fallback)
        run: |
          # Backend dependencies
          if [ ! -d "backend/.venv" ]; then
            echo "Installing backend dependencies..."
            cd backend
            python -m venv .venv
            source .venv/bin/activate
            pip install --upgrade pip wheel
            pip install -r requirements/base.txt
            pip install -r requirements/test.txt
            cd ..
          fi

          # Frontend dependencies
          if [ ! -d "frontend/node_modules" ]; then
            echo "Installing frontend dependencies..."
            cd frontend && npm ci --prefer-offline --no-audit && cd ..
          fi

      - name: Install MySQL Client and Redis Client
        run: |
          echo "Installing MySQL client and Redis client tools..."
          sudo apt-get update
          sudo apt-get install -y mysql-client redis-tools
          echo "MySQL and Redis clients installed successfully"

      - name: Wait for Services
        run: |
          echo "Waiting for services to be ready..."

          # Wait for MySQL
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot_password --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "MySQL not ready, waiting... ($i/30)"
            sleep 2
          done

          # Wait for Redis
          for i in {1..15}; do
            if redis-cli -h 127.0.0.1 -p 6379 ping | grep -q PONG; then
              echo "Redis is ready!"
              break
            fi
            echo "Redis not ready, waiting... ($i/15)"
            sleep 2
          done

      - name: Setup Test Database
        run: |
          mysql -h 127.0.0.1 -P 3306 -u root -proot_password -e "
            CREATE DATABASE IF NOT EXISTS bravo_test;
            GRANT ALL PRIVILEGES ON bravo_test.* TO 'bravo_user'@'%';
            FLUSH PRIVILEGES;
          "

      - name: Run Database Migrations
        working-directory: ./backend
        run: |
          source .venv/bin/activate
          echo "Running Django migrations..."
          python manage.py migrate --settings=bravo.settings.test
          echo "Database migrations completed"
        env:
          DATABASE_URL: mysql://bravo_user:bravo_password@127.0.0.1:3306/bravo_test

      - name: Run Backend Integration Tests
        working-directory: ./backend
        run: |
          source .venv/bin/activate
          echo "Running backend integration tests..."

          # 运行集成测试
          python -m pytest tests/integration/ \
            --cov=apps --cov-report=xml \
            --maxfail=3 -v --tb=short

          echo "Backend integration tests completed"
        env:
          DATABASE_URL: mysql://bravo_user:bravo_password@127.0.0.1:3306/bravo_test
          REDIS_URL: redis://127.0.0.1:6379/0
          DJANGO_SETTINGS_MODULE: bravo.settings.test

      - name: Install Frontend Dependencies for Integration
        working-directory: ./frontend
        run: |
          echo "Installing frontend dependencies in frontend directory..."
          npm install
          echo "Frontend dependencies installed"

      - name: Build Frontend for Integration
        working-directory: ./frontend
        run: |
          echo "Building frontend for integration tests..."
          npm run build
          echo "Frontend build completed"

      - name: Run Frontend Integration Tests
        working-directory: ./frontend
        run: |
          echo "Running frontend integration tests..."

          # 如果有集成测试脚本
          if npm run | grep -q "test:integration"; then
            npm run test:integration
          else
            echo "No frontend integration tests defined, running component tests instead"
            npm run test:ci
          fi

          echo "Frontend integration tests completed"

      - name: API Integration Tests
        run: |
          echo "Running API integration tests..."

          # 确保数据库状态正确
          mysql -h 127.0.0.1 -P 3306 -u root -proot_password -e "
            CREATE DATABASE IF NOT EXISTS bravo_test;
            FLUSH PRIVILEGES;
          "

          # 启动后端服务器进行API测试
          cd backend
          source .venv/bin/activate

          # 重新运行迁移确保数据库结构正确
          python manage.py migrate --settings=bravo.settings.test

          python manage.py runserver 8000 --settings=bravo.settings.test &
          BACKEND_PID=$!
          cd ..

          # 等待服务器启动
          timeout 30 bash -c 'until curl -s http://localhost:8000/health/ > /dev/null; do sleep 1; done' || exit 1

          # 运行API测试 (如果存在)
          if [ -f "tests/api_integration_test.py" ]; then
            python tests/api_integration_test.py
          else
            echo "Basic API health check..."
            curl -f http://localhost:8000/health/ || exit 1
            curl -f http://localhost:8000/api-info/ || exit 1
          fi

          # 清理
          kill $BACKEND_PID 2>/dev/null || true

          echo "API integration tests completed"
        env:
          DATABASE_URL: mysql://bravo_user:bravo_password@127.0.0.1:3306/bravo_test
          REDIS_URL: redis://127.0.0.1:6379/0
          DJANGO_SETTINGS_MODULE: bravo.settings.test

      - name: Upload Integration Test Results
        if: always() && !env.ACT
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            backend/coverage.xml
            backend/htmlcov/
            frontend/coverage/
            backend/test-results/
          retention-days: 5

      - name: Integration Test Summary
        run: |
          echo "Integration Test Summary:"
          echo "- Backend integration tests with MySQL + Redis"
          echo "- Frontend component integration tests"
          echo "- API endpoint integration tests"
          echo "- Cross-service communication validation"
