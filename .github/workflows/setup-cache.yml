name: Setup Cache Strategy

on:
  workflow_call:
    outputs:
      frontend-cache-hit:
        description: "Frontend dependencies cache hit"
        value: ${{ jobs.setup-cache.outputs.frontend-cache-hit }}
      backend-cache-hit:
        description: "Backend dependencies cache hit"
        value: ${{ jobs.setup-cache.outputs.backend-cache-hit }}
      e2e-cache-hit:
        description: "E2E dependencies cache hit"
        value: ${{ jobs.setup-cache.outputs.e2e-cache-hit }}

env:
  NODE_VERSION: "20"
  PYTHON_VERSION: "3.11"

jobs:
  setup-cache:
    runs-on: ubuntu-latest
    timeout-minutes: 5 # 🚀 Phase 4: 减少超时时间以加快失败检测

    outputs:
      frontend-cache-hit: ${{ steps.frontend-cache.outputs.cache-hit }}
      backend-cache-hit: ${{ steps.backend-cache.outputs.cache-hit }}
      e2e-cache-hit: ${{ steps.e2e-cache.outputs.cache-hit }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Configure China Mirrors
        uses: ./.github/actions/configure-china-mirrors

      # Level 1: Frontend Dependencies Cache (Phase 4 Optimized)
      - name: Cache Frontend Dependencies (Phase 4)
        id: frontend-cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            frontend/node_modules
            ~/.npm
          key: frontend-deps-v4-phase4-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json', 'frontend/package-lock.json') }}
          restore-keys: |
            frontend-deps-v4-phase4-${{ runner.os }}-${{ env.NODE_VERSION }}-
            frontend-deps-v4-${{ runner.os }}-${{ env.NODE_VERSION }}-
            frontend-deps-v2-${{ runner.os }}-

      - name: Install Frontend Dependencies (Phase 4 Optimized)
        if: steps.frontend-cache.outputs.cache-hit != 'true'
        run: |
          echo "🚀 Phase 4: 安装前端依赖 (缓存未命中)..."
          # 优化npm安装：跳过脚本，使用缓存，忽略审计
          npm ci --prefer-offline --no-audit --ignore-scripts --silent
          echo "✅ 前端依赖安装完成 (Phase 4优化)"

      # Level 1: Backend Dependencies Cache (Phase 4 Optimized)
      - name: Cache Backend Dependencies (Phase 4)
        id: backend-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            backend/.venv
          key: backend-deps-v3-phase3-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('backend/requirements/*.txt') }}
          restore-keys: |
            backend-deps-v3-phase3-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
            backend-deps-v3-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
            backend-deps-v2-${{ runner.os }}-

      - name: Install Backend Dependencies (Phase 4 Optimized)
        if: steps.backend-cache.outputs.cache-hit != 'true'
        working-directory: ./backend
        run: |
          echo "🚀 Phase 4: 安装后端依赖 (缓存未命中)..."
          python -m venv .venv
          source .venv/bin/activate
          # 优化pip安装：使用缓存，禁用进度条，批量安装
          pip install --upgrade pip wheel --quiet
          pip install -r requirements/base.txt -r requirements/test.txt --prefer-binary --quiet
          echo "✅ 后端依赖安装完成 (Phase 4优化)"

      # Level 1A: E2E NPM Dependencies Cache
      - name: Cache E2E Dependencies
        id: e2e-cache
        uses: actions/cache@v4
        with:
          path: |
            e2e/node_modules
            ~/.npm
          key: e2e-deps-v2-${{ runner.os }}-${{ hashFiles('e2e/package-lock.json') }}
          restore-keys: |
            e2e-deps-v2-${{ runner.os }}-
            e2e-deps-v1-${{ runner.os }}-

      - name: Install E2E Dependencies
        if: steps.e2e-cache.outputs.cache-hit != 'true'
        run: |
          echo "Installing E2E dependencies (cache miss)..."
          # E2E dependencies managed via root npm workspaces
          if [ ! -d "node_modules" ]; then
            npm ci --prefer-offline --no-audit
          fi
          echo "✅ E2E dependencies managed via root npm workspaces"

      # Level 1B: Playwright Browsers Cache (CRITICAL for performance)
      - name: Cache Playwright Browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-v3-${{ runner.os }}-${{ hashFiles('e2e/package-lock.json') }}
          restore-keys: |
            playwright-browsers-v3-${{ runner.os }}-

      - name: Install Playwright Browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          echo "Installing Playwright browsers (cache miss) - ~280MB download..."
          cd e2e && npx playwright install --with-deps
          echo "✅ Playwright browsers installed and cached"

      # Level 2: Build Cache (Frontend)
      - name: Cache Frontend Build
        uses: actions/cache@v4
        with:
          path: frontend/dist
          key: frontend-build-v3-${{ runner.os }}-${{ hashFiles('frontend/src/**/*', 'frontend/package.json') }}
          restore-keys: |
            frontend-build-v1-${{ runner.os }}-

      - name: Build Frontend (Phase 4 Optimized)
        run: |
          if [ ! -d "frontend/dist" ] || [ -z "$(ls -A frontend/dist 2>/dev/null)" ]; then
            echo "🚀 Phase 4: 构建前端 (缓存未命中)..."
            # 确保workspace根依赖已安装
            if [ ! -d "node_modules" ]; then
              echo "安装workspace依赖..."
              npm ci --prefer-offline --no-audit --ignore-scripts --silent
            fi
            echo "✅ 前端依赖通过npm workspaces管理"
            # 优化构建：跳过类型检查以加快速度
            echo "构建前端 (跳过类型检查以加速)..."
            npm run build:frontend:fast 2>/dev/null || npm run build:skip-check
            echo "✅ 前端构建完成 (Phase 4优化)"
          else
            echo "✅ 前端构建已存在，跳过"
          fi

      - name: Cache Summary
        run: |
          echo "Cache Summary:"
          echo "Frontend Cache Hit: ${{ steps.frontend-cache.outputs.cache-hit }}"
          echo "Backend Cache Hit: ${{ steps.backend-cache.outputs.cache-hit }}"
          echo "E2E Cache Hit: ${{ steps.e2e-cache.outputs.cache-hit }}"
