name: Backend Tests

on:
  workflow_call:
    inputs:
      test-type:
        description: "Test type: unit, integration, regression, all"
        type: string
        default: "all"
      python-version:
        description: "Python version"
        type: string
        default: "3.11"

env:
  PYTHON_VERSION: ${{ inputs.python-version }}
  MYSQL_DATABASE: bravo_test
  MYSQL_USER: bravo_user
  MYSQL_PASSWORD: bravo_password
  MYSQL_ROOT_PASSWORD: root_password

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
          MYSQL_USER: ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
        options: --health-cmd="mysqladmin ping -h 127.0.0.1 -P 3306 -u root -p${{ env.MYSQL_ROOT_PASSWORD }}" --health-interval=10s --health-timeout=5s --health-retries=10
        ports:
          - 3306:3306

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "backend/requirements/*.txt"

      - name: Configure China Mirrors
        uses: ./.github/actions/configure-china-mirrors

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install -r requirements/test.txt

      - name: Wait for MySQL
        run: |
          echo "‚è≥ Waiting for MySQL to be ready..."
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -P 3306 -u root -p${{ env.MYSQL_ROOT_PASSWORD }} --silent; then
              echo "‚úÖ MySQL is ready!"
              break
            fi
            echo "MySQL not ready, waiting... ($i/30)"
            sleep 2
          done

      - name: Setup test database
        run: |
          mysql -h 127.0.0.1 -P 3306 -u root -p${{ env.MYSQL_ROOT_PASSWORD }} -e "
            CREATE DATABASE IF NOT EXISTS ${{ env.MYSQL_DATABASE }};
            GRANT ALL PRIVILEGES ON ${{ env.MYSQL_DATABASE }}.* TO '${{ env.MYSQL_USER }}'@'%';
            FLUSH PRIVILEGES;
          "

      - name: Run tests
        working-directory: ./backend
        run: |
          case "${{ inputs.test-type }}" in
            "unit")
              echo "üß™ Running unit tests..."
              python -m pytest tests/ -k "not integration" --cov=. --cov-report=xml --maxfail=0 -v
              ;;
            "integration")
              echo "üîó Running integration tests..."
              python -m pytest tests/integration/ --cov=. --cov-report=xml --maxfail=0 -v
              ;;
            "regression")
              echo "üîí Running regression tests..."
              python -m pytest tests/test_regression.py -v --tb=short --strict-markers --disable-warnings --maxfail=0
              ;;
            *)
              echo "üöÄ Running all tests..."
              python -m pytest --cov=. --cov-report=xml --cov-report=html --maxfail=0 -v
              ;;
          esac

      - name: Upload coverage to Codecov
        if: inputs.test-type == 'all' || inputs.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results-${{ inputs.test-type }}
          path: |
            backend/htmlcov/
            backend/coverage.xml
            backend/test-results/
