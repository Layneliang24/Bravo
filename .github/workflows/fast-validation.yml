name: Fast Validation Pipeline

on:
  workflow_call:
    inputs:
      skip-e2e:
        description: "Skip E2E tests for faster feedback"
        type: boolean
        default: false

env:
  NODE_VERSION: "20"
  PYTHON_VERSION: "3.11"

jobs:
  # 第一步：并行的快速检查
  quick-checks:
    strategy:
      fail-fast: false
      matrix:
        check: ["lint-frontend", "lint-backend", "type-check", "security-scan"]

    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4

      # 复用全局缓存
      - name: Restore Dependencies Cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            frontend/node_modules
            ~/.cache/pip
          key: deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json', 'backend/requirements/*.txt') }}

      - name: Setup Environment
        uses: ./.github/actions/setup-cached-env

      - name: Run Check
        run: |
          case "${{ matrix.check }}" in
          "lint-frontend")
            cd frontend && npm run lint
              ;;
          "lint-backend")
            cd backend && source .venv/bin/activate && python -m flake8 . --select=E9,F63,F7,F82 --exclude=migrations,__pycache__,.venv
              ;;
            "type-check")
              cd frontend && npm run type-check
              ;;
            "security-scan")
              npm audit --audit-level=high --production
              ;;
          esac

  # 第二步：并行的核心测试
  core-tests:
    needs: quick-checks
    strategy:
      fail-fast: false
      matrix:
        test-type: ["backend-unit", "frontend-unit", "integration-smoke"]

    runs-on: ubuntu-latest
    timeout-minutes: 8

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: bravo_test
          MYSQL_USER: bravo_user
          MYSQL_PASSWORD: bravo_password
          MYSQL_ROOT_PASSWORD: root_password
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=3s --health-retries=10
        ports:
          - 3306:3306

    steps:
      - uses: actions/checkout@v4

      # 快速环境设置
      - name: Setup Fast Environment
        uses: ./.github/actions/setup-cached-env

      - name: Run Test Matrix
        run: |
          case "${{ matrix.test-type }}" in
            "backend-unit")
              # 等待数据库准备就绪
              until mysqladmin ping -h 127.0.0.1 -P 3306 -u bravo_user -pbravo_password --silent; do
                echo "等待MySQL启动..."
                sleep 2
              done
              cd backend && python manage.py migrate --noinput --settings=bravo.settings.test
              python -m pytest tests/unit/ --maxfail=5 -x
              ;;
            "frontend-unit")
              cd frontend && npm run test:unit:fast
              ;;
            "integration-smoke")
              # 等待数据库准备就绪
              until mysqladmin ping -h 127.0.0.1 -P 3306 -u bravo_user -pbravo_password --silent; do
                echo "等待MySQL启动..."
                sleep 2
              done
              # 最小集成测试
              cd backend && python manage.py migrate --noinput --settings=bravo.settings.test
              python manage.py test tests.quick --parallel 4
              ;;
          esac
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: bravo_test
          DB_USER: bravo_user
          DB_PASSWORD: bravo_password

  # 第三步：条件性E2E（仅在需要时运行）
  e2e-critical:
    if: ${{ !inputs.skip-e2e }}
    needs: [quick-checks, core-tests]
    runs-on: ubuntu-latest
    timeout-minutes: 10 # 大幅减少超时时间

    steps:
      - uses: actions/checkout@v4

      # 使用预构建的Docker容器
      - name: Run E2E with Container
        run: |
          echo "🚀 使用容器化E2E测试..."
          docker-compose -f docker-compose.test.yml up --build --exit-code-from e2e-tests

  # 汇总结果
  validation-summary:
    needs: [quick-checks, core-tests, e2e-critical]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Validation Summary
        run: |
          echo "## ⚡ Fast Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quick Checks | ${{ needs.quick-checks.result }} | ~2min |" >> $GITHUB_STEP_SUMMARY
          echo "| Core Tests | ${{ needs.core-tests.result }} | ~5min |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Critical | ${{ needs.e2e-critical.result }} | ~8min |" >> $GITHUB_STEP_SUMMARY

          # 总耗时目标：15分钟以内
          echo "🎯 **目标总耗时**: <15分钟 (vs 之前60+分钟)"
