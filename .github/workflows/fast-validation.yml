name: Fast Validation Pipeline

on:
  workflow_call:
    inputs:
      skip-e2e:
        description: "Skip E2E tests for faster feedback"
        type: boolean
        default: false

env:
  NODE_VERSION: "20"
  PYTHON_VERSION: "3.11"

jobs:
  # 第一步：并行的快速检查
  quick-checks:
    strategy:
      fail-fast: false
      matrix:
        check: ["lint-frontend", "lint-backend", "type-check", "security-scan"]

    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4

      # 复用全局缓存
      - name: Restore Dependencies Cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            frontend/node_modules
            ~/.cache/pip
          key: deps-v5-${{ runner.os }}-${{ hashFiles('**/package-lock.json', 'backend/requirements/*.txt') }}

      - name: Setup Environment
        uses: ./.github/actions/setup-cached-env

      - name: Run Check
        run: |
          case "${{ matrix.check }}" in
          "lint-frontend")
            npm run lint:frontend
            ;;
          "lint-backend")
            cd backend && source .venv/bin/activate && python -m flake8 . --select=E9,F63,F7,F82 --exclude=migrations,__pycache__,.venv
            ;;
          "type-check")
            npm run test:frontend
            ;;
          "security-scan")
            npm audit --audit-level=high --production
            ;;
          esac

  # 第二步：并行的核心测试
  core-tests:
    needs: quick-checks
    strategy:
      fail-fast: false
      matrix:
        test-type: ["backend-unit", "frontend-unit", "integration-smoke"]

    runs-on: ubuntu-latest
    timeout-minutes: 8

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: bravo_test
          MYSQL_USER: bravo_user
          MYSQL_PASSWORD: bravo_password
          MYSQL_ROOT_PASSWORD: root_password
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=3s --health-retries=10
        ports:
          - 3306:3306

    steps:
      - uses: actions/checkout@v4

      # 快速环境设置
      - name: Setup Fast Environment
        uses: ./.github/actions/setup-cached-env

      - name: Run Test Matrix
        run: |
          case "${{ matrix.test-type }}" in
            "backend-unit")
              # 等待数据库准备就绪
              until mysqladmin ping -h 127.0.0.1 -P 3306 -u bravo_user -pbravo_password --silent; do
                echo "等待MySQL启动..."
                sleep 2
              done
              cd backend && source .venv/bin/activate
              python manage.py migrate --noinput --settings=bravo.settings.test
              python -m pytest tests/unit/ --maxfail=5 -x
              ;;
            "frontend-unit")
              npm run test:frontend
              ;;
            "integration-smoke")
              # 等待数据库准备就绪
              until mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot_password --silent; do
                echo "等待MySQL启动..."
                sleep 2
              done

              # 授予bravo_user创建测试数据库的权限
              mysql -h 127.0.0.1 -P 3306 -u root -proot_password -e "
                CREATE DATABASE IF NOT EXISTS bravo_test;
                CREATE USER IF NOT EXISTS 'bravo_user'@'%' IDENTIFIED BY 'bravo_password';
                GRANT ALL PRIVILEGES ON bravo_test.* TO 'bravo_user'@'%';
                GRANT ALL PRIVILEGES ON *.* TO 'bravo_user'@'%';
                FLUSH PRIVILEGES;
              "
              echo "✅ 已授予bravo_user创建测试数据库的权限"

              # 最小集成测试
              cd backend && source .venv/bin/activate
              python manage.py migrate --noinput --settings=bravo.settings.test
              python manage.py test tests.quick --parallel 4
              ;;
          esac
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: bravo_test
          DB_USER: bravo_user
          DB_PASSWORD: bravo_password

  # 第三步：条件性E2E（仅在需要时运行） - 🚀 Phase 5.2缓存优化
  e2e-critical:
    if: ${{ !inputs.skip-e2e }}
    needs: [quick-checks, core-tests]
    runs-on: ubuntu-latest
    timeout-minutes: 8 # 🚀 Phase 5.2: 恢复合理时间，架构优化消除下载

    steps:
      - uses: actions/checkout@v4

      # 🚀 Phase 5.2: 恢复Playwright浏览器缓存 (关键优化)
      - name: Restore Playwright Browsers Cache
        uses: actions/cache/restore@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-v3-${{ runner.os }}-${{ hashFiles('e2e/package-lock.json') }}
          restore-keys: |
            playwright-browsers-v3-${{ runner.os }}-

      # 🚀 Phase 5.2: 使用缓存优化的Docker容器
      - name: Run E2E with Container (Cache Optimized)
        run: |
          echo "🚀 使用容器化E2E测试..."

          # 启动所有服务
          if command -v docker-compose >/dev/null 2>&1; then
            echo "启动Docker服务..."
            # 🎯 最优方案：移除环境变量传递，容器自给自足
            docker compose -f docker-compose.test.yml up --build -d

            echo "等待E2E测试完成..."
            # 🎯 第26轮修复：在容器启动后立即获取ID，避免被清理后无法获取
            sleep 1 # 🚀 Phase 5: 减少等待时间 2s → 1s
            E2E_CID=$(docker compose -f docker-compose.test.yml ps -q e2e-tests)
            echo "E2E容器ID: $E2E_CID"

            if [ -n "$E2E_CID" ]; then
              # 等待容器完全停止并获取退出码
              E2E_EXIT_CODE=$(docker wait "$E2E_CID" 2>/dev/null || echo "1")
              echo "E2E测试真实退出码: $E2E_EXIT_CODE"
            else
              echo "❌ 无法获取E2E容器ID，可能容器启动失败或过早退出。"
              E2E_EXIT_CODE=1
            fi

            echo "📦 收集E2E测试产物..."
            mkdir -p e2e-artifacts || true
            if [ -n "$E2E_CID" ]; then
              docker cp "$E2E_CID:/app/test-results" e2e-artifacts/test-results 2>/dev/null || true
              docker cp "$E2E_CID:/app/playwright-report" e2e-artifacts/playwright-report 2>/dev/null || true
              docker cp "$E2E_CID:/app/e2e-results.xml" e2e-artifacts/e2e-results.xml 2>/dev/null || true
            fi

            echo "清理Docker服务..."
            docker compose -f docker-compose.test.yml down

            exit $E2E_EXIT_CODE
          else
            echo "docker-compose not found, using 'docker compose' instead..."
            # 🎯 最优方案：移除环境变量传递，容器自给自足
            docker compose -f docker-compose.test.yml up --build -d

            echo "等待E2E测试完成..."
            # 🎯 第26轮修复：在容器启动后立即获取ID，避免被清理后无法获取
            sleep 1 # 🚀 Phase 5: 减少等待时间 2s → 1s
            E2E_CID=$(docker compose -f docker-compose.test.yml ps -q e2e-tests)
            echo "E2E容器ID: $E2E_CID"

            if [ -n "$E2E_CID" ]; then
              # 等待容器完全停止并获取退出码
              E2E_EXIT_CODE=$(docker wait "$E2E_CID" 2>/dev/null || echo "1")
              echo "E2E测试真实退出码: $E2E_EXIT_CODE"
            else
              echo "❌ 无法获取E2E容器ID，可能容器启动失败或过早退出。"
              E2E_EXIT_CODE=1
            fi

            echo "📦 收集E2E测试产物..."
            mkdir -p e2e-artifacts || true
            if [ -n "$E2E_CID" ]; then
              docker cp "$E2E_CID:/app/test-results" e2e-artifacts/test-results 2>/dev/null || true
              docker cp "$E2E_CID:/app/playwright-report" e2e-artifacts/playwright-report 2>/dev/null || true
              docker cp "$E2E_CID:/app/e2e-results.xml" e2e-artifacts/e2e-results.xml 2>/dev/null || true
            fi

            echo "清理Docker服务..."
            docker compose -f docker-compose.test.yml down

            exit $E2E_EXIT_CODE
          fi

      - name: Upload E2E Artifacts (fast-validation)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-critical-artifacts
          path: |
            e2e-artifacts/test-results/**
            e2e-artifacts/playwright-report/**
            e2e-artifacts/e2e-results.xml
          retention-days: 7

  # 汇总结果
  validation-summary:
    needs: [quick-checks, core-tests, e2e-critical]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Validation Summary
        run: |
          echo "## ⚡ Fast Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quick Checks | ${{ needs.quick-checks.result }} | ~2min |" >> $GITHUB_STEP_SUMMARY
          echo "| Core Tests | ${{ needs.core-tests.result }} | ~5min |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Critical | ${{ needs.e2e-critical.result }} | ~8min |" >> $GITHUB_STEP_SUMMARY

          # 总耗时目标：15分钟以内
          echo "🎯 **目标总耗时**: <15分钟 (vs 之前60+分钟)"
