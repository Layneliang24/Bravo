name: Optimized CI Pipeline

on:
  workflow_call:
    inputs:
      skip-frontend:
        description: "Skip frontend tests"
        type: boolean
        default: false
      skip-backend:
        description: "Skip backend tests"
        type: boolean
        default: false
      skip-e2e:
        description: "Skip E2E tests"
        type: boolean
        default: false
      cache-suffix:
        description: "Cache key suffix for uniqueness"
        type: string
        default: ""
    outputs:
      frontend-test-result:
        description: "Frontend test result"
        value: ${{ jobs.frontend-test.outputs.result }}
      backend-test-result:
        description: "Backend test result"
        value: ${{ jobs.backend-test.outputs.result }}
      e2e-test-result:
        description: "E2E test result"
        value: ${{ jobs.e2e-test.outputs.result }}

env:
  NODE_VERSION: "20"
  PYTHON_VERSION: "3.11"
  # 中国镜像优化
  HUSKY: 0
  CI: true

jobs:
  # 智能依赖检测
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      e2e-changed: ${{ steps.changes.outputs.e2e }}
      infrastructure-changed: ${{ steps.changes.outputs.infrastructure }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - 'package*.json'
              - '.github/workflows/**'
            backend:
              - 'backend/**'
              - 'requirements/**'
              - '.github/workflows/**'
            e2e:
              - 'e2e/**'
              - 'frontend/**'
              - 'backend/**'
              - '.github/workflows/**'
            infrastructure:
              - '.github/**'
              - 'docker-compose*'
              - 'Dockerfile*'
              - 'scripts/**'

  # 前端测试（并行优化）
  frontend-test:
    if: ${{ !inputs.skip-frontend && (needs.detect-changes.outputs.frontend-changed == 'true' || github.event_name == 'pull_request') }}
    needs: detect-changes
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.test.outcome }}
    strategy:
      matrix:
        test-type: ["unit", "component", "integration"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup Optimized Cache
        uses: ./.github/actions/cache-setup
        with:
          cache-type: "frontend"
          cache-key-suffix: ${{ inputs.cache-suffix }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmmirror.com"

      - name: Install Dependencies
        run: |
          cd frontend
          if [ "${{ steps.frontend-cache.outputs.cache-hit }}" != "true" ]; then
            npm ci --prefer-offline --no-audit
          fi

      - name: Run Tests
        id: test
        run: |
          cd frontend
          case "${{ matrix.test-type }}" in
            'unit')
              npm run test:unit -- --coverage
              ;;
            'component')
              npm run test:component
              ;;
            'integration')
              npm run test:integration
              ;;
          esac

      - name: Upload Coverage
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          directory: frontend/coverage
          flags: frontend

  # 后端测试（数据库并行）
  backend-test:
    if: ${{ !inputs.skip-backend && (needs.detect-changes.outputs.backend-changed == 'true' || github.event_name == 'pull_request') }}
    needs: detect-changes
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.test.outcome }}
    strategy:
      matrix:
        db-type: ["sqlite", "mysql"]
      fail-fast: false
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: test_bravo
          MYSQL_USER: bravo_user
          MYSQL_PASSWORD: bravo_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - uses: actions/checkout@v4

      - name: Setup Optimized Cache
        uses: ./.github/actions/cache-setup
        with:
          cache-type: "backend"
          cache-key-suffix: ${{ inputs.cache-suffix }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          cd backend
          if [ "${{ steps.backend-cache.outputs.cache-hit }}" != "true" ]; then
            python -m pip install --upgrade pip -i https://pypi.tuna.tsinghua.edu.cn/simple
            pip install -r requirements/test.txt -i https://pypi.tuna.tsinghua.edu.cn/simple
          fi

      - name: Run Tests
        id: test
        env:
          DB_TYPE: ${{ matrix.db-type }}
        run: |
          cd backend
          if [ "$DB_TYPE" = "mysql" ]; then
            export DATABASE_URL="mysql://bravo_user:bravo_password@127.0.0.1:3306/test_bravo"
            python manage.py migrate --settings=bravo.settings.test --run-syncdb
          fi
          python -m pytest tests/ --cov=. --cov-report=xml --maxfail=0 -v

      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          directory: backend
          flags: backend-${{ matrix.db-type }}

  # E2E测试（分片并行）
  e2e-test:
    if: ${{ !inputs.skip-e2e && (needs.detect-changes.outputs.e2e-changed == 'true' || github.event_name == 'pull_request') }}
    needs: [detect-changes, frontend-test, backend-test]
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.test.outcome }}
    strategy:
      matrix:
        shard: [1, 2, 3]
        total-shards: [3]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup Optimized Cache
        uses: ./.github/actions/cache-setup
        with:
          cache-type: "full"
          cache-key-suffix: ${{ inputs.cache-suffix }}

      - name: Setup Services
        run: |
          # 启动后端服务（模拟）
          echo "Starting backend service for E2E tests..."
          # 这里可以添加实际的服务启动逻辑

      - name: Run E2E Tests
        id: test
        run: |
          cd e2e
          npm install
          npx playwright test --shard=${{ matrix.shard }}/${{ matrix.total-shards }}

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ matrix.shard }}
          path: e2e/test-results/

  # 性能基准测试
  performance-test:
    if: needs.detect-changes.outputs.frontend-changed == 'true' || github.event_name == 'pull_request'
    needs: [detect-changes, frontend-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Optimized Cache
        uses: ./.github/actions/cache-setup
        with:
          cache-type: "frontend"
          cache-key-suffix: "perf-${{ inputs.cache-suffix }}"

      - name: Build for Production
        run: |
          cd frontend
          npm ci --prefer-offline
          npm run build

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun

      - name: Upload Performance Report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: .lighthouseci/

  # 安全扫描
  security-scan:
    if: needs.detect-changes.outputs.infrastructure-changed == 'true' || github.event_name == 'pull_request'
    needs: detect-changes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Security Scan
        run: |
          # Bandit for Python
          pip install bandit
          bandit -r backend/ -f json -o bandit-report.json || true

          # npm audit for Node.js
          cd frontend && npm audit --audit-level moderate || true
          cd ../e2e && npm audit --audit-level moderate || true

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: bandit-report.json

  # 汇总结果
  test-summary:
    if: always()
    needs:
      [frontend-test, backend-test, e2e-test, performance-test, security-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Test Summary
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ${{ needs.frontend-test.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | ${{ needs.backend-test.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E | ${{ needs.e2e-test.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance-test.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security-scan.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
