name: Security Quality Gate

on:
  workflow_call:
    inputs:
      severity:
        description: "Security scan severity level"
        type: string
        default: "medium"
      timeout:
        description: "Job timeout in minutes"
        type: number
        default: 10

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"

jobs:
  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore Backend Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            backend/.venv
          key: backend-deps-v2-${{ runner.os }}-${{ hashFiles('backend/requirements/*.txt') }}
          restore-keys: |
            backend-deps-v2-${{ runner.os }}-

      - name: Install Security Tools
        run: |
          echo "Installing security scanning tools..."
          pip install bandit safety semgrep
          npm ci --prefer-offline --no-audit
          echo "Security tools installed"

      - name: Python Security Scan (Bandit)
        working-directory: ./backend
        run: |
          echo "Running Bandit security scan..."
          bandit -r apps/ -f json -o bandit-report.json || true
          bandit -r apps/ -f txt
          echo "Bandit scan completed"

      - name: Python Dependency Vulnerability Scan (Safety)
        working-directory: ./backend
        run: |
          echo "Running Safety vulnerability scan..."
          if [ -d ".venv" ]; then
            source .venv/bin/activate
            safety check --json --output safety-report.json || true
            safety check || true
          else
            pip install -r requirements/base.txt
            safety check --json --output safety-report.json || true
            safety check || true
          fi
          echo "Safety scan completed"

      - name: Frontend Dependency Audit
        run: |
          echo "Running npm audit for frontend workspace..."
          # Ensure frontend dependencies are installed
          if [ ! -d frontend/node_modules ]; then
            echo "Installing frontend dependencies first..."
            cd frontend && npm ci --prefer-offline --no-audit && cd ..
          fi

          # Convert severity level to npm audit format
          case "${{ inputs.severity }}" in
            "medium") AUDIT_LEVEL="moderate" ;;
            "high") AUDIT_LEVEL="high" ;;
            "critical") AUDIT_LEVEL="critical" ;;
            *) AUDIT_LEVEL="moderate" ;;
          esac

          # Use official npm registry for security audit to avoid mirror issues
          npm config set registry https://registry.npmjs.org/
          # Run audit for frontend workspace from root directory
          npm audit --workspace=frontend --audit-level=$AUDIT_LEVEL --json > frontend-audit.json || true
          npm audit --workspace=frontend --audit-level=$AUDIT_LEVEL || true
          # Restore mirror config
          npm config set registry https://registry.npmmirror.com/
          echo "npm audit completed"

      - name: Semgrep Static Analysis
        run: |
          echo "Running Semgrep static analysis..."
          semgrep --config=auto --json --output=semgrep-report.json . || true
          semgrep --config=auto . || true
          echo "Semgrep scan completed"

      - name: Check for Secrets
        run: |
          echo "Checking for exposed secrets..."

          # Check for common secret patterns
          SECRET_PATTERNS=(
            "password\s*=\s*['\"][^'\"]*['\"]"
            "api_key\s*=\s*['\"][^'\"]*['\"]"
            "secret_key\s*=\s*['\"][^'\"]*['\"]"
            "token\s*=\s*['\"][^'\"]*['\"]"
          )

          FOUND_SECRETS=false
          for pattern in "${SECRET_PATTERNS[@]}"; do
            if grep -r -E "$pattern" . --exclude-dir=.git --exclude-dir=node_modules --exclude="*.json" --exclude="*.md" >/dev/null 2>&1; then
              FOUND_SECRETS=true
            fi
          done

          if [ "$FOUND_SECRETS" = true ]; then
            echo "WARNING: Potential secrets found in code"
          else
            echo "No obvious secrets detected"
          fi

      - name: Check Protected File Modifications
        run: |
          echo "Checking for modifications to protected files..."

          PROTECTED_FILES=(
            ".github/workflows/*.yml"
            "requirements/*.txt"
            "package.json"
            "package-lock.json"
          )

          MODIFIED_PROTECTED=false
          for pattern in "${PROTECTED_FILES[@]}"; do
            if git diff --name-only origin/main...HEAD 2>/dev/null | grep -E "$pattern" 2>/dev/null; then
              MODIFIED_PROTECTED=true
            fi
          done

          if [ "$MODIFIED_PROTECTED" = true ]; then
            echo "WARNING: Protected files modified - requires manual review"
          else
            echo "No protected files modified"
          fi

      - name: Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            backend/bandit-report.json
            backend/safety-report.json
            frontend/npm-audit.json
            semgrep-report.json
          retention-days: 7

      - name: Security Summary
        run: |
          echo "Security Scan Summary:"
          echo "- Bandit: Python code security analysis"
          echo "- Safety: Python dependency vulnerabilities"
          echo "- npm audit: Frontend dependency vulnerabilities"
          echo "- Semgrep: Static code analysis"
          echo "- Secret detection: Pattern-based secret scanning"
          echo "- Protected files: Critical file modification check"
