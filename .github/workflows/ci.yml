name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: bravo_test
          MYSQL_USER: bravo_user
          MYSQL_PASSWORD: bravo_password
          MYSQL_ROOT_PASSWORD: root_password
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -proot_password"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 3306:3306

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Configure China Mirrors
        uses: ./.github/actions/configure-china-mirrors

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements/test.txt

      - name: Run linting
        run: |
          cd backend
          pylint apps/ --rcfile=.pylintrc
          black --check .
          isort --check-only .

      - name: ‚è≥ Wait for MySQL and setup permissions
        run: |
          echo "‚è≥ Waiting for MySQL to be ready..."
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot_password --silent; then
              echo "‚úÖ MySQL is ready!"
              break
            fi
            echo "MySQL not ready, waiting... (attempt $i/30)"
            sleep 2
          done
          
          echo "üîê Granting database privileges to bravo_user..."
          # Grant necessary privileges for Django testing (requires full DB management)
          mysql -h 127.0.0.1 -P 3306 -u root -proot_password -e "
            GRANT ALL PRIVILEGES ON \`test_%\`.* TO 'bravo_user'@'%';
            GRANT ALL PRIVILEGES ON \`bravo_test\`.* TO 'bravo_user'@'%';
            FLUSH PRIVILEGES;
          "
          echo "‚úÖ Database privileges configured"

      - name: Run tests
        run: |
          cd backend
          pytest --cov=. --cov-report=xml --cov-report=html --maxfail=0

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: true

  frontend-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Configure China Mirrors
        uses: ./.github/actions/configure-china-mirrors

      - name: Install dependencies
        run: |
          cd frontend
          npm install --ignore-scripts

      - name: Run linting
        run: |
          cd frontend
          npm run lint
          npm run type-check

      - name: Run tests
        run: |
          cd frontend
          npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: true

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Configure China Mirrors
        uses: ./.github/actions/configure-china-mirrors

      - name: Install dependencies
        run: |
          cd e2e
          npm install --ignore-scripts

      - name: Install Playwright Browsers
        run: |
          cd e2e
          npx playwright install --with-deps

      - name: Run E2E tests
        run: |
          cd e2e
          npm run test

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: e2e/playwright-report/
          retention-days: 30

  security-scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
