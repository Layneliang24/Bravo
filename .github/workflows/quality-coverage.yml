name: Coverage Quality Gate

on:
  workflow_call:
    inputs:
      min-backend-coverage:
        description: "Minimum backend coverage percentage"
        type: string
        default: "85"
      min-frontend-coverage:
        description: "Minimum frontend coverage percentage"
        type: string
        default: "80"
      timeout:
        description: "Job timeout in minutes"
        type: number
        default: 8

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"

jobs:
  coverage-check:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download Backend Coverage
        uses: actions/download-artifact@v4
        with:
          name: backend-unit-coverage
          path: ./backend-coverage/
        continue-on-error: true

      - name: Download Frontend Coverage
        uses: actions/download-artifact@v4
        with:
          name: frontend-unit-coverage
          path: ./frontend-coverage/
        continue-on-error: true

      - name: Install Coverage Tools
        run: |
          echo "Installing coverage analysis tools..."
          pip install coverage
          npm install -g nyc
          echo "Coverage tools installed"

      - name: Analyze Backend Coverage
        run: |
          echo "Analyzing backend coverage..."

          if [ -f "backend-coverage/coverage.xml" ]; then
            echo "Found backend coverage report"

            # ÊèêÂèñË¶ÜÁõñÁéáÁôæÂàÜÊØî
            BACKEND_COVERAGE=$(python -c "
            import xml.etree.ElementTree as ET
            try:
                tree = ET.parse('backend-coverage/coverage.xml')
                root = tree.getroot()
                line_rate = float(root.attrib.get('line-rate', 0)) * 100
                print(f'{line_rate:.1f}')
            except Exception as e:
                print('0.0')
            ")

            echo "Backend coverage: ${BACKEND_COVERAGE}%"
            echo "Required minimum: ${{ inputs.min-backend-coverage }}%"

            # Ê£ÄÊü•ÊòØÂê¶ËææÂà∞ÊúÄ‰ΩéË¶ÅÊ±Ç
            if (( $(echo "${BACKEND_COVERAGE} >= ${{ inputs.min-backend-coverage }}" | bc -l) )); then
              echo "‚úÖ Backend coverage meets requirements"
              echo "BACKEND_COVERAGE_PASS=true" >> $GITHUB_ENV
            else
              echo "‚ùå Backend coverage below minimum threshold"
              echo "BACKEND_COVERAGE_PASS=false" >> $GITHUB_ENV
            fi

            echo "BACKEND_COVERAGE=${BACKEND_COVERAGE}" >> $GITHUB_ENV
          else
            echo "‚ùå Backend coverage report not found"
            echo "BACKEND_COVERAGE_PASS=false" >> $GITHUB_ENV
            echo "BACKEND_COVERAGE=0.0" >> $GITHUB_ENV
          fi

      - name: Analyze Frontend Coverage
        run: |
          echo "Analyzing frontend coverage..."

          if [ -f "frontend-coverage/lcov.info" ] || [ -f "frontend-coverage/coverage-summary.json" ]; then
            echo "Found frontend coverage report"

            # Â∞ùËØï‰ªé‰∏çÂêåÊ†ºÂºèÊèêÂèñË¶ÜÁõñÁéá
            FRONTEND_COVERAGE="0.0"

            if [ -f "frontend-coverage/coverage-summary.json" ]; then
              FRONTEND_COVERAGE=$(python -c "
              import json
              try:
                  with open('frontend-coverage/coverage-summary.json', 'r') as f:
                      data = json.load(f)
                      total = data.get('total', {})
                      lines = total.get('lines', {})
                      pct = lines.get('pct', 0)
                      print(f'{pct:.1f}')
              except Exception as e:
                  print('0.0')
              ")
            elif [ -f "frontend-coverage/lcov.info" ]; then
              # ‰ªé lcov.info ÊèêÂèñË¶ÜÁõñÁéá
              FRONTEND_COVERAGE=$(awk '
                /^LF:/ { lf += $1; sub(/^LF:/, "", $1); total_lines += $1 }
                /^LH:/ { lh += $1; sub(/^LH:/, "", $1); covered_lines += $1 }
                END { if (total_lines > 0) print (covered_lines / total_lines * 100); else print 0 }
              ' frontend-coverage/lcov.info)
            fi

            echo "Frontend coverage: ${FRONTEND_COVERAGE}%"
            echo "Required minimum: ${{ inputs.min-frontend-coverage }}%"

            # Ê£ÄÊü•ÊòØÂê¶ËææÂà∞ÊúÄ‰ΩéË¶ÅÊ±Ç
            if (( $(echo "${FRONTEND_COVERAGE} >= ${{ inputs.min-frontend-coverage }}" | bc -l) )); then
              echo "‚úÖ Frontend coverage meets requirements"
              echo "FRONTEND_COVERAGE_PASS=true" >> $GITHUB_ENV
            else
              echo "‚ùå Frontend coverage below minimum threshold"
              echo "FRONTEND_COVERAGE_PASS=false" >> $GITHUB_ENV
            fi

            echo "FRONTEND_COVERAGE=${FRONTEND_COVERAGE}" >> $GITHUB_ENV
          else
            echo "‚ùå Frontend coverage report not found"
            echo "FRONTEND_COVERAGE_PASS=false" >> $GITHUB_ENV
            echo "FRONTEND_COVERAGE=0.0" >> $GITHUB_ENV
          fi

      - name: Generate Coverage Report
        run: |
          echo "## Coverage Quality Gate Report" > coverage-report.md
          echo "" >> coverage-report.md
          echo "| Component | Coverage | Threshold | Status |" >> coverage-report.md
          echo "|-----------|----------|-----------|--------|" >> coverage-report.md

          # Backend coverage row
          if [ "$BACKEND_COVERAGE_PASS" == "true" ]; then
            BACKEND_STATUS="‚úÖ Pass"
          else
            BACKEND_STATUS="‚ùå Fail"
          fi
          echo "| Backend | ${BACKEND_COVERAGE}% | ${{ inputs.min-backend-coverage }}% | $BACKEND_STATUS |" >> coverage-report.md

          # Frontend coverage row
          if [ "$FRONTEND_COVERAGE_PASS" == "true" ]; then
            FRONTEND_STATUS="‚úÖ Pass"
          else
            FRONTEND_STATUS="‚ùå Fail"
          fi
          echo "| Frontend | ${FRONTEND_COVERAGE}% | ${{ inputs.min-frontend-coverage }}% | $FRONTEND_STATUS |" >> coverage-report.md

          echo "" >> coverage-report.md
          echo "**Generated:** $(date)" >> coverage-report.md
          echo "**Commit:** ${{ github.sha }}" >> coverage-report.md

          echo "Coverage report generated"

      - name: Add Coverage to Step Summary
        run: |
          echo "## üìä Coverage Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat coverage-report.md >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$BACKEND_COVERAGE_PASS" == "true" ] && [ "$FRONTEND_COVERAGE_PASS" == "true" ]; then
            echo "### ‚úÖ All Coverage Requirements Met" >> $GITHUB_STEP_SUMMARY
            echo "Both backend and frontend meet the minimum coverage thresholds." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Coverage Requirements Not Met" >> $GITHUB_STEP_SUMMARY
            echo "One or more components failed to meet minimum coverage requirements." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Action Required:** Increase test coverage before merging." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Coverage Quality Gate Decision
        run: |
          echo "Making coverage quality gate decision..."

          if [ "$BACKEND_COVERAGE_PASS" == "true" ] && [ "$FRONTEND_COVERAGE_PASS" == "true" ]; then
            echo "‚úÖ Coverage quality gate PASSED"
            echo "Backend: ${BACKEND_COVERAGE}% (‚â• ${{ inputs.min-backend-coverage }}%)"
            echo "Frontend: ${FRONTEND_COVERAGE}% (‚â• ${{ inputs.min-frontend-coverage }}%)"
            exit 0
          else
            echo "‚ùå Coverage quality gate FAILED"
            echo "Backend: ${BACKEND_COVERAGE}% (required: ‚â• ${{ inputs.min-backend-coverage }}%)"
            echo "Frontend: ${FRONTEND_COVERAGE}% (required: ‚â• ${{ inputs.min-frontend-coverage }}%)"
            echo ""
            echo "Please increase test coverage to meet the minimum requirements."
            exit 1
          fi

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-quality-report
          path: coverage-report.md
          retention-days: 7

      - name: Coverage Summary
        if: always()
        run: |
          echo "Coverage Quality Gate Summary:"
          echo "- Backend coverage: ${BACKEND_COVERAGE:-N/A}% (min: ${{ inputs.min-backend-coverage }}%)"
          echo "- Frontend coverage: ${FRONTEND_COVERAGE:-N/A}% (min: ${{ inputs.min-frontend-coverage }}%)"
          echo "- Quality gate: $([ "$BACKEND_COVERAGE_PASS" == "true" ] && [ "$FRONTEND_COVERAGE_PASS" == "true" ] && echo "PASSED" || echo "FAILED")"
