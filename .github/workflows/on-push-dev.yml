name: Dev Branch - Medium Validation

on:
  push:
    branches: [dev]

# Âπ∂ÂèëÊéßÂà∂
concurrency:
  group: dev-push-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Á¨¨‰∏ÄÊ≠•ÔºöËÆæÁΩÆÁºìÂ≠ò
  setup:
    name: Setup Cache & Environment
    uses: ./.github/workflows/setup-cache.yml

  # Á¨¨‰∫åÊ≠•ÔºöÂÆåÊï¥ÂçïÂÖÉÊµãËØï (Âπ∂Ë°å)
  unit-tests-backend:
    name: Backend Unit Tests (Full)
    needs: setup
    uses: ./.github/workflows/test-unit-backend.yml
    with:
      coverage: true
      timeout: 12

  unit-tests-frontend:
    name: Frontend Unit Tests (Full)
    needs: setup
    uses: ./.github/workflows/test-unit-frontend.yml
    with:
      coverage: true
      timeout: 10

  # Á¨¨‰∏âÊ≠•ÔºöÂÆåÊï¥ÈõÜÊàêÊµãËØï - üöÄ Phase 2‰ºòÂåñÁâàÊú¨
  integration-tests:
    name: Integration Tests (Optimized)
    needs: [unit-tests-backend, unit-tests-frontend]
    uses: ./.github/workflows/test-integration-optimized.yml
    with:
      timeout: 8 # üöÄ Phase 2‰ºòÂåñÔºö15ÂàÜÈíü ‚Üí 8ÂàÜÈíü

  # Á¨¨ÂõõÊ≠•ÔºöÂÆåÊï¥E2EÊµãËØï
  e2e-full:
    name: E2E Tests (Full Suite)
    needs: integration-tests
    uses: ./.github/workflows/test-e2e-full.yml
    with:
      browser: "chromium"
      timeout: 25

  # Á¨¨‰∫îÊ≠•ÔºöËΩªÈáèÁ∫ßÂõûÂΩíÊµãËØï (Âπ∂Ë°å)
  regression-light:
    name: Regression Tests (Light)
    needs: integration-tests
    uses: ./.github/workflows/test-regression.yml
    with:
      scope: "light"
      timeout: 20

  # Á¨¨ÂÖ≠Ê≠•ÔºöË¶ÜÁõñÁéáÊ£ÄÊü•Ôºà‰∏¥Êó∂Èôç‰ΩéË¶ÅÊ±Ç‰ª•‰øÆÂ§çÂü∫Á°ÄËÆæÊñΩÔºâ
  coverage-check:
    name: Coverage Quality Gate
    needs: [unit-tests-backend, unit-tests-frontend]
    uses: ./.github/workflows/quality-coverage.yml
    with:
      min-backend-coverage: "60" # ‰∏¥Êó∂‰ªé85%ÈôçÂà∞60%
      min-frontend-coverage: "70" # ‰∏¥Êó∂‰ªé80%ÈôçÂà∞70%

  # Á¨¨‰∏ÉÊ≠•ÔºöÁõÆÂΩï‰øùÊä§
  directory-guard:
    name: Directory Protection
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check Directory Rules
        run: |
          echo "Checking directory protection rules for dev branch..."

          # Ê£ÄÊü•Ê†πÁõÆÂΩïÊñ∞Â¢ûÊñá‰ª∂
          forbidden_files=$(git diff --name-only HEAD~1...HEAD | grep -E '^[^/]+\.(md|txt|test_.*\.py|.*_test\.py|\.keep|\.example)$' || true)
          if [ -n "$forbidden_files" ]; then
            echo "WARNING: Root directory clutter detected in dev branch:"
            echo "$forbidden_files"
            echo "Consider moving these files to appropriate directories"
          else
            echo "Directory protection check passed"
          fi

  # Á¨¨ÂÖ´Ê≠•ÔºöDevÂàÜÊîØÈ™åËØÅÊ±áÊÄª
  dev-validation-summary:
    name: Dev Validation Summary
    runs-on: ubuntu-latest
    needs:
      [
        unit-tests-backend,
        unit-tests-frontend,
        integration-tests,
        e2e-full,
        regression-light,
        coverage-check,
        directory-guard,
      ]
    if: always()
    steps:
      - name: Generate Dev Branch Report
        run: |
          echo "## Dev Branch Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Message:** $(echo '${{ github.event.head_commit.message }}' | tr -d '()' | head -c 100)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Ê£ÄÊü•ÂêÑ‰∏™ÊµãËØïÁªìÊûú
          BACKEND_STATUS="${{ needs.unit-tests-backend.result }}"
          FRONTEND_STATUS="${{ needs.unit-tests-frontend.result }}"
          INTEGRATION_STATUS="${{ needs.integration-tests.result }}"
          E2E_STATUS="${{ needs.e2e-full.result }}"
          REGRESSION_STATUS="${{ needs.regression-light.result }}"
          COVERAGE_STATUS="${{ needs.coverage-check.result }}"
          DIRECTORY_STATUS="${{ needs.directory-guard.result }}"

          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Unit Tests | $BACKEND_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Unit Tests | $FRONTEND_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | $INTEGRATION_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Full Tests | $E2E_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| Regression (Light) | $REGRESSION_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage Check | $COVERAGE_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| Directory Guard | $DIRECTORY_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Âà§Êñ≠Êï¥‰ΩìÁªìÊûú
          if [[ "$BACKEND_STATUS" == "success" && \
                "$FRONTEND_STATUS" == "success" && \
                "$INTEGRATION_STATUS" == "success" && \
                "$E2E_STATUS" == "success" && \
                "$REGRESSION_STATUS" == "success" && \
                "$COVERAGE_STATUS" == "success" ]]; then
            echo "‚úÖ **All dev branch validations passed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Dev branch is stable and ready for production promotion." >> $GITHUB_STEP_SUMMARY
            echo "Next step: Create PR from dev to main for full production validation." >> $GITHUB_STEP_SUMMARY
            echo "Dev branch validation completed successfully"
          else
            echo "‚ùå **Some validations failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Dev branch has issues that need to be addressed." >> $GITHUB_STEP_SUMMARY
            echo "Please fix the failed tests before creating PR to main." >> $GITHUB_STEP_SUMMARY
            echo "Dev branch validation failed"
            exit 1
          fi

      - name: Dev Branch Status Notification
        run: |
          echo "üìç Dev Branch Push Summary:"
          echo "   - Commit: ${{ github.sha }}"
          echo "   - Author: ${{ github.actor }}"
          echo "   - Full test suite executed"
          echo "   - Coverage requirements checked"
          echo "   - Light regression testing completed"
