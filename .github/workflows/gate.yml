name: 🚀 Gate - Comprehensive Test Suite (Parallel Optimized)

on:
  push:
    branches: [main, dev, "feature/*", "hotfix/*", "release/*"]
  pull_request:
    branches: [main, dev]
  workflow_call:
    secrets:
      CODECOV_TOKEN:
        required: false

jobs:
  # ==========================================
  # Job 1: 依赖安装和缓存 (Dependencies Setup)
  # ==========================================
  setup-dependencies:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: bravo_test
          MYSQL_USER: bravo_user
          MYSQL_PASSWORD: bravo_password
          MYSQL_ROOT_PASSWORD: root_password
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot_password"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
        ports:
          - 3306:3306
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js with Cache
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: 'npm'
          cache-dependency-path: |
            frontend/package.json
            e2e/package.json

      - name: Setup Python with Cache
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'pip'
          cache-dependency-path: backend/requirements/base.txt

      - name: Configure China Mirrors
        uses: ./.github/actions/configure-china-mirrors

      # 安装前端依赖
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: |
          echo "📦 安装前端依赖..."
          npm ci --prefer-offline --no-audit --ignore-scripts
          echo "✅ 前端依赖安装完成"
          echo "🔍 验证vitest安装..."
          npx vitest --version

      # 安装E2E依赖
      - name: Install E2E Dependencies
        working-directory: ./e2e
        run: |
          echo "🧪 安装E2E测试依赖..."
          npm install --prefer-offline --no-audit --ignore-scripts
          echo "✅ E2E依赖安装完成"

      # 等待MySQL启动
      - name: Wait for MySQL to be ready
        run: |
          echo "⏳ 等待MySQL启动..."
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot_password --silent; then
              echo "✅ MySQL已就绪"
              break
            fi
            echo "等待MySQL启动... ($i/30)"
            sleep 2
          done

      # 配置MySQL用户权限
      - name: Configure MySQL user permissions
        run: |
          echo "🔧 配置MySQL用户权限..."
          mysql -h 127.0.0.1 -P 3306 -u root -proot_password -e "
            CREATE DATABASE IF NOT EXISTS bravo_test;
            CREATE USER IF NOT EXISTS 'bravo_user'@'%' IDENTIFIED BY 'bravo_password';
            GRANT ALL PRIVILEGES ON bravo_test.* TO 'bravo_user'@'%';
            FLUSH PRIVILEGES;
          "
          echo "✅ MySQL用户权限配置完成"

      # 安装后端依赖
      - name: Install Backend Dependencies
        working-directory: ./backend
        run: |
          echo "🐍 安装后端依赖..."
          pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install -r requirements/test.txt
          echo "✅ 后端依赖安装完成"
          echo "🔍 验证pytest安装..."
          python -c "import pytest; print(f'pytest版本: {pytest.__version__}')"

      # 缓存前端node_modules
      - name: Cache Frontend Dependencies
        uses: actions/upload-artifact@v4
        with:
          name: frontend-node-modules
          path: frontend/node_modules
          retention-days: 1

      # 缓存E2E node_modules
      - name: Cache E2E Dependencies
        uses: actions/upload-artifact@v4
        with:
          name: e2e-node-modules
          path: e2e/node_modules
          retention-days: 1

      # 缓存Python环境信息
      - name: Cache Python Environment Info
        uses: actions/upload-artifact@v4
        with:
          name: python-env-info
          path: |
            ~/.cache/pip
          retention-days: 1

  # ==========================================
  # Job 2: 前端测试 (Frontend Tests)
  # ==========================================
  frontend-tests:
    needs: setup-dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js with Cache
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: 'npm'
          cache-dependency-path: frontend/package.json

      - name: Download Frontend Dependencies
        uses: actions/download-artifact@v4
        with:
          name: frontend-node-modules
          path: frontend/node_modules

      - name: Run Frontend Tests
        working-directory: ./frontend
        run: |
          echo "🧪 运行前端单元测试..."
          echo "🔍 检查node_modules是否存在..."
          ls -la node_modules/ | head -10
          echo "🔍 检查vitest是否存在..."
          ls -la node_modules/.bin/vitest || echo "vitest不存在，重新安装依赖..."
          if [ ! -f node_modules/.bin/vitest ]; then
            echo "📦 重新安装前端依赖..."
            npm ci --prefer-offline --no-audit --ignore-scripts
          fi
          npm run test:coverage
          echo "✅ 前端测试完成"

      - name: Generate Frontend Coverage
        working-directory: ./frontend
        run: |
          echo "📊 生成前端覆盖率报告..."
          if [ -f "coverage/lcov.info" ]; then
            cp coverage/lcov.info ../coverage-frontend.lcov
            echo "✅ 前端覆盖率报告生成完成"
          else
            echo "⚠️ 前端覆盖率文件不存在"
          fi

      - name: Upload Frontend Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: |
            frontend/coverage/
            frontend/test-results/
            coverage-frontend.lcov
          retention-days: 7

  # ==========================================
  # Job 3: 后端测试 (Backend Tests)
  # ==========================================
  backend-tests:
    needs: setup-dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: bravo_test
          MYSQL_USER: bravo_user
          MYSQL_PASSWORD: bravo_password
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot_password"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python with Cache
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'pip'
          cache-dependency-path: backend/requirements/base.txt

      - name: Configure China Mirrors
        uses: ./.github/actions/configure-china-mirrors

      - name: Install Backend Dependencies
        working-directory: ./backend
        run: |
          echo "🐍 安装后端依赖..."
          pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install -r requirements/test.txt
          echo "🔍 验证pytest安装..."
          python -c "import pytest; print(f'✅ pytest {pytest.__version__} 已安装')"

      - name: Wait for MySQL to be ready
        run: |
          echo "⏳ 等待MySQL启动..."
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot_password --silent; then
              echo "✅ MySQL已就绪"
              break
            fi
            echo "等待MySQL启动... (attempt $i/30)"
            sleep 2
          done

      - name: Configure MySQL user permissions
        run: |
          echo "🔧 配置MySQL用户权限..."
          mysql -h 127.0.0.1 -P 3306 -u root -proot_password -e "
            CREATE DATABASE IF NOT EXISTS bravo_test;
            CREATE USER IF NOT EXISTS 'bravo_user'@'%' IDENTIFIED BY 'bravo_password';
            GRANT ALL PRIVILEGES ON bravo_test.* TO 'bravo_user'@'%';
            GRANT ALL PRIVILEGES ON \`test_%\`.* TO 'bravo_user'@'%';
            FLUSH PRIVILEGES;
          "
          echo "✅ MySQL用户权限配置完成"

      - name: Setup Test Database
        working-directory: ./backend
        run: |
          echo "🗄️ 设置测试数据库..."
          python -c "
          import os, django
          os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bravo.settings.test')
          django.setup()
          from django.db import connection
          from django.contrib.contenttypes.models import ContentType
          from django.contrib.auth.models import Group, Permission
          from django.contrib.sessions.models import Session
          from django.contrib.admin.models import LogEntry
          from apps.users.models import User
          
          print('📋 创建数据库表...')
          models_to_create = [ContentType, Group, Permission, User, Session, LogEntry]
          
          with connection.schema_editor() as schema_editor:
              for model in models_to_create:
                  if not model._meta.db_table in connection.introspection.table_names():
                      schema_editor.create_model(model)
                      print(f'✅ Created table: {model._meta.db_table}')
                  else:
                      print(f'⏭️  Table already exists: {model._meta.db_table}')
          
          print('✅ 数据库表创建完成')
          "
          echo "✅ 测试数据库设置完成"
        env:
          DATABASE_URL: mysql://bravo_user:bravo_password@mysql:3306/bravo_test
          DJANGO_SETTINGS_MODULE: bravo.settings.test

      - name: Run Backend Tests
        working-directory: ./backend
        run: |
          echo "🧪 运行后端测试..."
          python -m pytest tests/ -v --maxfail=0 --tb=short --junit-xml=test-results/backend-unit-results.xml --cov=. --cov-report=xml:coverage.xml --cov-report=html:htmlcov
          echo "✅ 后端测试完成"
        env:
          DATABASE_URL: mysql://bravo_user:bravo_password@mysql:3306/bravo_test
          DJANGO_SETTINGS_MODULE: bravo.settings.test

      - name: Generate Backend Coverage
        working-directory: ./backend
        run: |
          echo "📊 生成后端覆盖率报告..."
          if [ -f "coverage.xml" ]; then
            cp coverage.xml ../coverage-backend.xml
            echo "✅ 后端覆盖率报告生成完成"
          else
            echo "⚠️ 后端覆盖率文件不存在"
          fi

      - name: Upload Backend Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            backend/test-results/
            backend/htmlcov/
            coverage-backend.xml
          retention-days: 7

  # ==========================================
  # Job 4: E2E测试 (End-to-End Tests)
  # ==========================================
  e2e-tests:
    needs: setup-dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 25

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: bravo_test
          MYSQL_USER: bravo_user
          MYSQL_PASSWORD: bravo_password
          MYSQL_ROOT_PASSWORD: root_password
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot_password"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
        ports:
          - 3306:3306

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js with Cache
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: 'npm'
          cache-dependency-path: |
            frontend/package.json
            e2e/package.json

      - name: Setup Python with Cache
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'pip'
          cache-dependency-path: backend/requirements/base.txt

      - name: Download Frontend Dependencies
        uses: actions/download-artifact@v4
        with:
          name: frontend-node-modules
          path: frontend/node_modules

      - name: Download E2E Dependencies
        uses: actions/download-artifact@v4
        with:
          name: e2e-node-modules
          path: e2e/node_modules
        continue-on-error: true

      - name: Configure China Mirrors
        uses: ./.github/actions/configure-china-mirrors

      - name: Install Backend Dependencies
        working-directory: ./backend
        run: |
          echo "🐍 安装后端依赖..."
          pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install -r requirements/test.txt

      - name: Install Playwright Browsers
        working-directory: ./e2e
        run: |
          echo "🎭 安装Playwright浏览器..."
          npx playwright install --with-deps
          echo "✅ Playwright浏览器安装完成"

      - name: Build Frontend for E2E
        working-directory: ./frontend
        run: |
          echo "🏗️ 构建前端用于E2E测试..."
          echo "🔍 检查前端依赖..."
          if [ ! -d "node_modules" ] || [ ! -f "node_modules/.bin/vite" ]; then
            echo "📦 重新安装前端依赖..."
            npm ci --prefer-offline --no-audit --ignore-scripts
          fi
          npm run build:skip-check || npm run build
          echo "✅ 前端构建完成"

      - name: Start Backend Server
        working-directory: ./backend
        run: |
          echo "🚀 启动后端服务器..."
          python manage.py runserver 8000 &
          echo $! > backend.pid
          echo "✅ 后端服务器已启动"
        env:
          DATABASE_URL: mysql://bravo_user:bravo_password@mysql:3306/bravo_test
          DJANGO_SETTINGS_MODULE: bravo.settings.test

      - name: Start Frontend Server
        working-directory: ./frontend
        run: |
          echo "🌐 启动前端服务器..."
          cd dist
          python3 -m http.server 3001 &
          echo $! > ../frontend.pid
          cd ..
          echo "✅ 前端服务器已启动"

      - name: Run E2E Tests with Optimization
        working-directory: ./e2e
        run: |
          echo "🧪 运行E2E测试（优化版）..."
          echo "🔍 检查node_modules是否存在..."
          if [ ! -d "node_modules" ] || [ ! -f "node_modules/.bin/playwright" ]; then
            echo "📦 重新安装E2E依赖..."
            npm install --prefer-offline --no-audit --ignore-scripts
          fi
          npx playwright test --workers=2 --max-failures=5 --trace=retain-on-failure --reporter=html --reporter=junit
          echo "✅ E2E测试完成"
        env:
          PLAYWRIGHT_JUNIT_OUTPUT_NAME: e2e-results.xml

      - name: Upload E2E Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            e2e/test-results/
            e2e/playwright-report/
          retention-days: 7

      - name: Cleanup Servers
        if: always()
        run: |
          echo "🧹 清理服务器进程..."
          [ -f backend/backend.pid ] && kill $(cat backend/backend.pid) 2>/dev/null || true
          [ -f frontend/frontend.pid ] && kill $(cat frontend/frontend.pid) 2>/dev/null || true
          echo "✅ 服务器进程已清理"

  # ==========================================
  # Job 5: 性能测试 (Performance Tests)
  # ==========================================
  performance-tests:
    needs: [setup-dependencies, frontend-tests]
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js with Cache
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: 'npm'
          cache-dependency-path: frontend/package.json

      - name: Download Frontend Dependencies
        uses: actions/download-artifact@v4
        with:
          name: frontend-node-modules
          path: frontend/node_modules

      - name: Configure China Mirrors
        uses: ./.github/actions/configure-china-mirrors

      - name: Build Frontend for Performance Testing
        working-directory: ./frontend
        run: |
          echo "🏗️ 构建前端用于性能测试..."
          echo "🔍 检查前端依赖..."
          if [ ! -d "node_modules" ] || [ ! -f "node_modules/.bin/vite" ]; then
            echo "📦 重新安装前端依赖..."
            npm ci --prefer-offline --no-audit --ignore-scripts
          fi
          npm run build:skip-check || npm run build
          echo "✅ 前端构建完成"

      - name: Run Lighthouse Performance Tests
        run: |
          echo "⚡ 运行Lighthouse性能测试..."
          npm install -g @lhci/cli
          
          # 启动前端服务器
          cd frontend/dist
          python3 -m http.server 3001 &
          FRONTEND_PID=$!
          cd ../..
          
          # 等待服务器启动
          echo "等待服务器启动..."
          for i in {1..30}; do
            if curl -f -s http://localhost:3001 > /dev/null 2>&1; then
              echo "✅ 前端服务器启动成功"
              sleep 3
              break
            fi
            echo "等待服务器启动... (attempt $i/30)"
            sleep 2
          done
          
          # 运行Lighthouse CI
          if lhci autorun --config=lighthouserc.json; then
            echo "✅ Lighthouse CI 成功完成"
          else
            echo "⚠️ Lighthouse CI 失败，尝试备用方法..."
            lhci autorun --config=lighthouserc-simple.json || echo "❌ 简单配置失败"
          fi
          
          # 清理进程
          kill $FRONTEND_PID 2>/dev/null || true
          echo "✅ 性能测试完成"

      - name: Upload Performance Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            .lighthouseci/
            lighthouse-*.html
          retention-days: 7

  # ==========================================
  # Job 6: 汇总和报告 (Summary & Reporting)
  # ==========================================
  final-summary:
    needs: [frontend-tests, backend-tests, e2e-tests, performance-tests]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download All Test Results
        uses: actions/download-artifact@v4
        with:
          path: all-test-results

      - name: Generate Test Summary
        run: |
          echo "📊 生成测试汇总报告..."
          
          echo "## 🚀 Gate Pipeline 测试汇总" > test-summary.md
          echo "" >> test-summary.md
          echo "### 📈 Jobs 执行状态" >> test-summary.md
          echo "- 前端测试: ${{ needs.frontend-tests.result }}" >> test-summary.md
          echo "- 后端测试: ${{ needs.backend-tests.result }}" >> test-summary.md
          echo "- E2E测试: ${{ needs.e2e-tests.result }}" >> test-summary.md
          echo "- 性能测试: ${{ needs.performance-tests.result }}" >> test-summary.md
          echo "" >> test-summary.md
          
          # 检查覆盖率文件
          if [ -f "all-test-results/frontend-test-results/coverage-frontend.lcov" ]; then
            echo "✅ 前端覆盖率报告已生成"
          fi
          
          if [ -f "all-test-results/backend-test-results/coverage-backend.xml" ]; then
            echo "✅ 后端覆盖率报告已生成"
          fi
          
          echo "✅ 测试汇总报告生成完成"

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: |
            all-test-results/frontend-test-results/coverage-frontend.lcov
            all-test-results/backend-test-results/coverage-backend.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload Final Summary
        uses: actions/upload-artifact@v4
        with:
          name: final-test-summary
          path: |
            test-summary.md
            all-test-results/
          retention-days: 30

      - name: Check Overall Status
        run: |
          echo "🎯 检查整体测试状态..."
          
          FRONTEND_STATUS="${{ needs.frontend-tests.result }}"
          BACKEND_STATUS="${{ needs.backend-tests.result }}"
          E2E_STATUS="${{ needs.e2e-tests.result }}"
          PERFORMANCE_STATUS="${{ needs.performance-tests.result }}"
          
          echo "前端测试: $FRONTEND_STATUS"
          echo "后端测试: $BACKEND_STATUS" 
          echo "E2E测试: $E2E_STATUS"
          echo "性能测试: $PERFORMANCE_STATUS"
          
          if [[ "$FRONTEND_STATUS" == "success" && "$BACKEND_STATUS" == "success" && "$E2E_STATUS" == "success" ]]; then
            echo "🎉 所有核心测试通过！Gate检查成功！"
            exit 0
          else
            echo "❌ 部分测试失败，Gate检查未通过"
            exit 1
          fi