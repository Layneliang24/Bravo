name: Regression Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # 每天凌晨2点运行回归测试
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      test_type:
        description: "测试类型"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - api
          - ui
          - db
      update_baselines:
        description: "更新基线快照"
        required: false
        default: false
        type: boolean

jobs:
  regression-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: bravo_test
          MYSQL_USER: bravo_user
          MYSQL_PASSWORD: bravo_password
          MYSQL_ROOT_PASSWORD: root_password
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 3306:3306

      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client

      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm install --ignore-scripts
          cd ../e2e
          npm install --ignore-scripts
          npm install --ignore-scripts -g playwright

      - name: Install Playwright browsers
        run: |
          cd e2e
          npx playwright install --with-deps

      - name: ⏳ Wait for MySQL and setup permissions
        run: |
          echo "⏳ Waiting for MySQL to be ready..."
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot_password --silent; then
              echo "✅ MySQL is ready!"
              break
            fi
            echo "MySQL not ready, waiting... (attempt $i/30)"
            sleep 2
          done
          
          echo "🔐 Granting database privileges to bravo_user..."
          mysql -h 127.0.0.1 -P 3306 -u root -proot_password -e "
            GRANT CREATE, DROP ON \`test_%\`.* TO 'bravo_user'@'%';
            GRANT ALL PRIVILEGES ON \`bravo_test\`.* TO 'bravo_user'@'%';
            FLUSH PRIVILEGES;
          "
          echo "✅ Database privileges configured"

      - name: Setup test database
        env:
          DATABASE_URL: mysql://bravo_user:bravo_password@127.0.0.1:3306/bravo_test
        run: |
          cd backend
          python manage.py migrate
          python manage.py loaddata fixtures/test_data.json

      - name: Prepare backend for regression tests
        env:
          DATABASE_URL: mysql://bravo_user:bravo_password@127.0.0.1:3306/bravo_test
          REDIS_URL: redis://localhost:6379/0
          DEBUG: true
        run: |
          cd backend
          python manage.py migrate
          echo "✅ Backend prepared for regression tests"

      - name: Build frontend for regression tests
        run: |
          cd frontend
          npm run build:skip-check || npm run build
          echo "✅ Frontend built for regression tests"

      - name: Run regression tests (All)
        if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
        run: |
          node tests/regression/run-regression.js ${{ github.event.inputs.update_baselines == 'true' && '--update-snapshots' || '' }}

      - name: Run API regression tests
        if: github.event.inputs.test_type == 'api'
        run: |
          node tests/regression/run-regression.js --api-only ${{ github.event.inputs.update_baselines == 'true' && '--update-snapshots' || '' }}

      - name: Run UI regression tests
        if: github.event.inputs.test_type == 'ui'
        run: |
          node tests/regression/run-regression.js --ui-only ${{ github.event.inputs.update_baselines == 'true' && '--update-snapshots' || '' }}

      - name: Run Database regression tests
        if: github.event.inputs.test_type == 'db'
        run: |
          node tests/regression/run-regression.js --db-only ${{ github.event.inputs.update_baselines == 'true' && '--update-snapshots' || '' }}

      - name: Upload regression test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: regression-test-reports-node-${{ matrix.node-version }}
          path: |
            tests/regression/reports/
            tests/regression/data/snapshots/
          retention-days: 30

      - name: Upload Playwright traces
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-traces-node-${{ matrix.node-version }}
          path: tests/regression/reports/playwright-traces/
          retention-days: 7

      - name: Comment PR with regression test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './tests/regression/reports/regression-report.json';

            if (fs.existsSync(path)) {
              const report = JSON.parse(fs.readFileSync(path, 'utf8'));
              const summary = report.summary;

              const body = `## 🧪 回归测试结果

              **测试环境**: Node.js ${{ matrix.node-version }}
              **测试时间**: ${report.timestamp}

              ### 📊 测试统计
              - ✅ **通过**: ${summary.passed}
              - ❌ **失败**: ${summary.failed}
              - ⚠️ **错误**: ${summary.errors}
              - 📸 **新基线**: ${summary.baselines}
              - 📈 **总计**: ${summary.total}

              ### 📋 测试详情
              ${summary.failed > 0 || summary.errors > 0 ?
                '⚠️ **存在失败的测试，请查看详细报告**' :
                '🎉 **所有回归测试通过！**'
              }

              [查看完整报告](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              `;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

      - name: Fail job if regression tests failed
        run: |
          if [ -f "tests/regression/reports/regression-report.json" ]; then
            FAILED=$(cat tests/regression/reports/regression-report.json | jq '.summary.failed + .summary.errors')
            if [ "$FAILED" -gt 0 ]; then
              echo "❌ Regression tests failed: $FAILED test(s)"
              exit 1
            fi
          fi

  # 基线更新作业（仅在手动触发且选择更新基线时运行）
  update-baselines:
    runs-on: ubuntu-latest
    if: github.event.inputs.update_baselines == 'true' && github.event_name == 'workflow_dispatch'
    needs: regression-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download regression test artifacts
        uses: actions/download-artifact@v4
        with:
          name: regression-test-reports-node-20.x
          path: ./artifacts/

      - name: Update baselines
        run: |
          # 复制新的快照到基线目录
          if [ -d "./artifacts/tests/regression/data/snapshots" ]; then
            cp -r ./artifacts/tests/regression/data/snapshots/* tests/regression/config/baselines/ || true
          fi

      - name: Commit updated baselines
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if [ -n "$(git status --porcelain)" ]; then
            git add tests/regression/config/baselines/
            git commit -m "chore: update regression test baselines [skip ci]"
            git push
          else
            echo "No baseline changes to commit"
          fi

  # 性能趋势分析（定时任务）
  performance-analysis:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    needs: regression-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download regression test reports
        uses: actions/download-artifact@v4
        with:
          name: regression-test-reports-node-20.x
          path: ./reports/

      - name: Analyze performance trends
        run: |
          # 这里可以添加性能趋势分析脚本
          echo "📈 Performance trend analysis would run here"
          # 例如：比较API响应时间、UI渲染时间等

      - name: Create performance report
        run: |
          echo "📊 Creating performance trend report..."
          # 生成性能趋势报告

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-trend-report
          path: ./reports/performance-trend.json
          retention-days: 90
