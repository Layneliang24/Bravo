name: Integration Tests - Optimized

on:
  workflow_call:
    inputs:
      timeout:
        description: "Job timeout in minutes"
        type: number
        default: 8

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"
  MYSQL_DATABASE: bravo_test
  MYSQL_USER: bravo_user
  MYSQL_PASSWORD: bravo_password
  MYSQL_ROOT_PASSWORD: root_password

jobs:
  # 🚀 Phase 2 优化：共享服务启动
  # 🚀 Phase 4 优化：极速服务启动
  setup-services:
    runs-on: ubuntu-latest
    timeout-minutes: 1 # Phase 4: 减少超时时间
    outputs:
      services-ready: ${{ steps.services.outputs.ready }}

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: bravo_test
          MYSQL_USER: bravo_user
          MYSQL_PASSWORD: bravo_password
          MYSQL_ROOT_PASSWORD: root_password
        options: --health-cmd="mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot_password" --health-interval=2s --health-timeout=2s --health-retries=15
        ports:
          - 3306:3306

      redis:
        image: redis:7-alpine
        options: --health-cmd="redis-cli ping" --health-interval=2s --health-timeout=1s --health-retries=8
        ports:
          - 6379:6379

    steps:
      - name: Verify Services (Phase 4 Optimized)
        id: services
        run: |
          echo "🚀 Phase 4: 服务通过优化健康检查就绪！"
          echo "ready=true" >> $GITHUB_OUTPUT

  # 🚀 Phase 2 优化：并行执行Backend集成test
  backend-integration:
    needs: setup-services
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout }}

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: bravo_test
          MYSQL_USER: bravo_user
          MYSQL_PASSWORD: bravo_password
          MYSQL_ROOT_PASSWORD: root_password
        options: --health-cmd="mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot_password" --health-interval=5s --health-timeout=3s --health-retries=10
        ports:
          - 3306:3306

      redis:
        image: redis:7-alpine
        options: --health-cmd="redis-cli ping" --health-interval=5s --health-timeout=3s --health-retries=5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore Backend Dependencies
        uses: actions/cache@v4
        with:
          path: |
            backend/.venv
            ~/.cache/pip
          key: backend-deps-v3-${{ runner.os }}-${{ hashFiles('backend/requirements/*.txt') }}
          restore-keys: |
            backend-deps-v3-${{ runner.os }}-

      - name: Install Backend Dependencies
        working-directory: ./backend
        run: |
          if [ ! -d ".venv" ]; then
            echo "Installing backend dependencies..."
            python -m venv .venv
            source .venv/bin/activate
            pip install --upgrade pip wheel
            pip install -r requirements/base.txt -r requirements/test.txt
          else
            echo "Using cached backend dependencies"
          fi

      - name: Setup Test Database (Optimized)
        run: |
          echo "Setting up test database with optimized settings..."
          mysql -h 127.0.0.1 -P 3306 -u root -proot_password -e "
            CREATE DATABASE IF NOT EXISTS bravo_test
            CHARACTER SET utf8mb4
            COLLATE utf8mb4_unicode_ci;
            GRANT ALL PRIVILEGES ON bravo_test.* TO 'bravo_user'@'%';
            FLUSH PRIVILEGES;
          "

      - name: Run Database Migrations (Cached)
        working-directory: ./backend
        run: |
          source .venv/bin/activate
          echo "Running optimized Django migrations..."
          python manage.py migrate --settings=bravo.settings.test --run-syncdb
          echo "Database migrations completed"
        env:
          DATABASE_URL: mysql://bravo_user:bravo_password@127.0.0.1:3306/bravo_test

      - name: Run Backend Integration Tests
        working-directory: ./backend
        run: |
          source .venv/bin/activate
          echo "Running backend integration tests..."

          python -m pytest tests/integration/ \
            --cov=apps --cov-report=xml \
            --maxfail=3 -v --tb=short
        env:
          DATABASE_URL: mysql://bravo_user:bravo_password@127.0.0.1:3306/bravo_test
          REDIS_URL: redis://127.0.0.1:6379/0
          DJANGO_SETTINGS_MODULE: bravo.settings.test

      - name: Upload Backend Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-integration-results
          path: |
            backend/coverage.xml
            backend/htmlcov/
          retention-days: 3

  # 🚀 Phase 2 优化：并行执行Frontend集成test
  frontend-integration:
    needs: setup-services
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore Dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            frontend/node_modules
            ~/.npm
          key: frontend-deps-v3-${{ runner.os }}-${{ hashFiles('package-lock.json', 'frontend/package-lock.json') }}
          restore-keys: |
            frontend-deps-v3-${{ runner.os }}-

      - name: Install Dependencies
        run: |
          if [ ! -d "node_modules" ]; then
            echo "Installing npm workspaces dependencies..."
            npm ci --prefer-offline --no-audit
          else
            echo "Using cached frontend dependencies"
          fi

      - name: Build Frontend (Cached)
        run: |
          echo "Building frontend for integration tests..."
          npm run build:frontend

      - name: Run Frontend Integration Tests
        run: |
          echo "Running frontend integration tests..."
          npm run test:frontend -- --reporter=json --outputFile=frontend-results.json

      - name: Upload Frontend Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-integration-results
          path: |
            frontend/coverage/
            frontend-results.json
          retention-days: 3

  # 🚀 Phase 4 优化：极致轻量化APItest
  api-integration:
    needs: [backend-integration, frontend-integration]
    runs-on: ubuntu-latest
    timeout-minutes: 2 # Phase 4: 减少超时时间

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: bravo_test
          MYSQL_USER: bravo_user
          MYSQL_PASSWORD: bravo_password
          MYSQL_ROOT_PASSWORD: root_password
        options: --health-cmd="mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot_password" --health-interval=3s --health-timeout=2s --health-retries=6
        ports:
          - 3306:3306

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore Backend Dependencies
        uses: actions/cache@v4
        with:
          path: |
            backend/.venv
            ~/.cache/pip
          key: backend-deps-v3-${{ runner.os }}-${{ hashFiles('backend/requirements/*.txt') }}

      - name: Ultra-Fast API Health Test (Phase 4)
        working-directory: ./backend
        run: |
          source .venv/bin/activate

          # 🚀 Phase 4: 极简迁移，复用现有状态
          python manage.py migrate --settings=bravo.settings.test --fake-initial --verbosity=0

          # 🚀 Phase 4: 轻量级服务器启动
          python manage.py runserver 8000 --settings=bravo.settings.test --verbosity=0 &
          SERVER_PID=$!

          # 🚀 Phase 4: 优化等待策略 - 减少等待时间
          for i in {1..10}; do
            if curl -s -f http://localhost:8000/health/ > /dev/null 2>&1; then
              echo "✅ API服务器就绪 (${i}次尝试)"
              break
            fi
            sleep 0.5  # 减少等待间隔
          done

          # 🚀 Phase 4: 极简APIvalidate - 只test核心端点
          echo "执行极简API集成test..."
          curl -s -f http://localhost:8000/health/ > /dev/null || exit 1
          echo "✅ 核心API健康检查通过"

          # 清理
          kill $SERVER_PID 2>/dev/null || true
          echo "✅ 极简API集成test完成 (Phase 4优化)"
        env:
          DATABASE_URL: mysql://bravo_user:bravo_password@127.0.0.1:3306/bravo_test
          DJANGO_SETTINGS_MODULE: bravo.settings.test

  # 汇总结果
  integration-summary:
    needs: [backend-integration, frontend-integration, api-integration]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 1

    steps:
      - name: Integration Test Summary
        run: |
          echo "🚀 Phase 2 Optimized Integration Test Summary:"
          echo "- ⚡ Parallel execution: Backend + Frontend simultaneously"
          echo "- 🔧 Optimized database operations and caching"
          echo "- 🚀 Enhanced service startup with better health checks"
          echo "- 💾 Improved dependency caching strategies"
          echo ""
          echo "Backend Status: ${{ needs.backend-integration.result }}"
          echo "Frontend Status: ${{ needs.frontend-integration.result }}"
          echo "API Status: ${{ needs.api-integration.result }}"

          # 检查整体结果
          if [[ "${{ needs.backend-integration.result }}" == "success" && \
                "${{ needs.frontend-integration.result }}" == "success" && \
                "${{ needs.api-integration.result }}" == "success" ]]; then
            echo "✅ All integration tests passed!"
            exit 0
          else
            echo "❌ Some integration tests failed"
            exit 1
          fi
