name: Feature Branch - Development Validation

on:
  push:
    branches: [feature/*] # Âè™ÂØπfeaturebranchËß¶Âèë

# Âπ∂ÂèëÊéßÂà∂
concurrency:
  group: feature-push-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Á¨¨‰∏ÄÊ≠•ÔºöÂø´ÈÄüÁéØÂ¢ÉËÆæÁΩÆÔºàÁéØÂ¢ÉvalidateÔºå‰∏ç‰ΩøÁî®ÁºìÂ≠òÔºâ
  quick-setup:
    name: Quick Environment Setup
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Environment Ready
        run: echo "‚úÖ ÂºÄÂèëÁéØÂ¢ÉÂáÜÂ§áÂÆåÊàê"

  # Á¨¨‰∫åÊ≠•ÔºöÂø´ÈÄüÂêéÁ´Øtest
  quick-backend-tests:
    name: Quick Backend Tests
    needs: quick-setup
    runs-on: ubuntu-latest
    timeout-minutes: 5

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: bravo_test
          MYSQL_USER: bravo_user
          MYSQL_PASSWORD: bravo_password
          MYSQL_ROOT_PASSWORD: root_password
        options: --health-cmd="mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot_password" --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
          - 3306:3306

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "backend/requirements/*.txt"

      - name: Restore Backend Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            backend/.venv
          key: backend-deps-v2-${{ runner.os }}-${{ hashFiles('backend/requirements/*.txt') }}
          restore-keys: |
            backend-deps-v2-${{ runner.os }}-

      - name: Install Dependencies (if needed)
        working-directory: ./backend
        run: |
          if [ ! -d ".venv" ]; then
            echo "üì¶ installÂêéÁ´Ø‰æùËµñÔºàÁºìÂ≠òÊú™ÂëΩ‰∏≠Ôºâ..."
            python -m venv .venv
            source .venv/bin/activate
            pip install --upgrade pip wheel
            pip install -r requirements/base.txt -r requirements/test.txt
            echo "‚úÖ ÂêéÁ´Ø‰æùËµñinstallÂÆåÊàê"
          else
            echo "‚úÖ ‰ΩøÁî®ÁºìÂ≠òÁöÑÂêéÁ´Ø‰æùËµñ"
          fi

      - name: Run Quick Backend Tests
        working-directory: ./backend
        run: |
          echo "üß™ ËøêË°åÂø´ÈÄüÂêéÁ´Øtest..."
          echo "Debug: ÂΩìÂâçÁõÆÂΩï: $(pwd)"
          echo "Debug: PythonÁâàÊú¨: $(python --version)"

          # ÊøÄÊ¥ªËôöÊãüÁéØÂ¢É
          source .venv/bin/activate
          echo "Debug: ËôöÊãüÁéØÂ¢ÉÂ∑≤ÊøÄÊ¥ª"

          echo "üß™ ÊâßË°åtest..."
          python -m pytest tests/ -v --maxfail=5 --tb=short
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: bravo_test
          DB_USER: bravo_user
          DB_PASSWORD: bravo_password
          DJANGO_SETTINGS_MODULE: bravo.settings.test

  # Á¨¨‰∏âÊ≠•ÔºöÂø´ÈÄüÂâçÁ´Øtest
  quick-frontend-tests:
    name: Quick Frontend Tests
    needs: quick-setup
    runs-on: ubuntu-latest
    timeout-minutes: 4
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Dependencies
        run: |
          echo "installÊ†π‰æùËµñ..."
          npm ci --prefer-offline --no-audit
          echo "‚úÖ ÂâçÁ´Ø‰æùËµñÂ∑≤ÈÄöËøáÊ†πÁõÆÂΩïnpm workspacesÁªü‰∏ÄÁÆ°ÁêÜ"

      - name: Run Quick Frontend Tests
        run: |
          echo "üß™ ËøêË°åÂø´ÈÄüÂâçÁ´Øtest..."
          npm run test:ci --workspace=frontend

  # Á¨¨ÂõõÊ≠•Ôºö‰ª£Á†ÅË¥®ÈáèÂø´ÈÄüÊ£ÄÊü•
  quick-quality-check:
    name: Quick Quality Check
    needs: [quick-backend-tests, quick-frontend-tests]
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check Code Style
        run: |
          echo "üîç Âø´ÈÄü‰ª£Á†ÅÈ£éÊ†ºÊ£ÄÊü•..."

          # Ê£ÄÊü•Python‰ª£Á†ÅÈ£éÊ†º
          if command -v flake8 &> /dev/null; then
            flake8 backend/ --max-line-length=120 --exclude=migrations,venv,.venv || echo "‚ö†Ô∏è ‰ª£Á†ÅÈ£éÊ†ºÈóÆÈ¢òÔºåÂª∫ËÆÆ‰øÆÂ§ç"
          fi

          # Ê£ÄÊü•JavaScript‰ª£Á†ÅÈ£éÊ†º
          if [ -f "frontend/.eslintrc.js" ]; then
            npm run lint:frontend || echo "‚ö†Ô∏è ÂâçÁ´Ø‰ª£Á†ÅÈ£éÊ†ºÈóÆÈ¢òÔºåÂª∫ËÆÆ‰øÆÂ§ç"
          fi

      - name: Check for Common Issues
        run: |
          echo "üîç Ê£ÄÊü•Â∏∏ËßÅÈóÆÈ¢ò..."

          # Ê£ÄÊü•ÊòØÂê¶ÊúâË∞ÉËØï‰ª£Á†ÅÊÆãÁïô
          if grep -r "console.log\|print(" --include="*.js" --include="*.vue" --include="*.py" frontend/ backend/; then
            echo "‚ö†Ô∏è ÂèëÁé∞Ë∞ÉËØï‰ª£Á†ÅÔºåÂª∫ËÆÆÊ∏ÖÁêÜ"
          fi

          # Ê£ÄÊü•ÊòØÂê¶ÊúâTODOÊ≥®Èáä
          if grep -r "TODO\|FIXME\|HACK" --include="*.js" --include="*.vue" --include="*.py" frontend/ backend/; then
            echo "‚ÑπÔ∏è ÂèëÁé∞TODOÊ≥®ÈáäÔºåËØ∑ÂèäÊó∂Â§ÑÁêÜ"
          fi

  # Á¨¨‰∫îÊ≠•ÔºöÂºÄÂèëÂèçÈ¶àÊ±áÊÄª
  development-feedback:
    name: Development Feedback
    runs-on: ubuntu-latest
    needs: [quick-backend-tests, quick-frontend-tests, quick-quality-check]
    if: always()
    steps:
      - name: Generate Development Report
        run: |
          echo "## üöÄ Feature Branch Development Feedback" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Message:** $(echo '${{ github.event.head_commit.message }}' | tr -d '()' | head -c 100)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Êî∂ÈõÜtestÁªìÊûú
          BACKEND_STATUS="${{ needs.quick-backend-tests.result }}"
          FRONTEND_STATUS="${{ needs.quick-frontend-tests.result }}"
          QUALITY_STATUS="${{ needs.quick-quality-check.result }}"

          echo "| Test Type | Status | Purpose |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | $BACKEND_STATUS | Quick validation |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | $FRONTEND_STATUS | Quick validation |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Check | $QUALITY_STATUS | Code standards |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Âà§Êñ≠Êï¥‰ΩìÁªìÊûú
          if [[ "$BACKEND_STATUS" == "success" && "$FRONTEND_STATUS" == "success" ]]; then
            echo "‚úÖ **Development validation passed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üéâ Feature branch is ready for PR creation" >> $GITHUB_STEP_SUMMARY
            echo "üìù Next step: Create PR to dev branch" >> $GITHUB_STEP_SUMMARY

            if [[ "$QUALITY_STATUS" != "success" ]]; then
              echo "‚ö†Ô∏è Some quality issues detected - consider fixing before PR" >> $GITHUB_STEP_SUMMARY
            fi

            echo "Feature development validation completed successfully"
          else
            echo "‚ùå **Development validation failed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üîß Please fix the failing tests before creating PR" >> $GITHUB_STEP_SUMMARY
            echo "üí° Check the test logs for detailed error information" >> $GITHUB_STEP_SUMMARY
            echo "Feature development validation failed"
            exit 1
          fi

      - name: Development Status Notification
        if: success()
        run: |
          echo "üìç Feature Branch Summary:"
          echo "   - Branch: ${{ github.ref_name }}"
          echo "   - Commit: ${{ github.sha }}"
          echo "   - Status: Ready for PR"
          echo "   - Next: Create PR to dev branch"
