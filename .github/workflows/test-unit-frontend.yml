name: Frontend Unit Tests

on:
  workflow_call:
    inputs:
      coverage:
        description: "Generate coverage report"
        type: boolean
        default: false
      timeout:
        description: "Job timeout in minutes"
        type: number
        default: 8

env:
  NODE_VERSION: "20"

jobs:
  frontend-unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Cache Node Modules (Phase 4)
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            frontend/node_modules
            ~/.npm
          key: frontend-deps-v4-phase4-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json', 'frontend/package-lock.json') }}
          restore-keys: |
            frontend-deps-v4-phase4-${{ runner.os }}-${{ env.NODE_VERSION }}-
            frontend-deps-v4-${{ runner.os }}-${{ env.NODE_VERSION }}-
            frontend-deps-v3-${{ runner.os }}-

      - name: Install Dependencies (Optimized)
        run: |
          echo "🚀 Phase 4: 优化依赖install..."
          if [ ! -d "node_modules" ] || [ ! -d "frontend/node_modules" ]; then
            echo "Installing workspace dependencies (cache miss)..."
            npm ci --prefer-offline --no-audit --ignore-scripts
            echo "Installing frontend dependencies..."
            npm --prefix frontend ci --prefer-offline --no-audit --ignore-scripts
          else
            echo "✅ Using cached dependencies"
          fi

      - name: Run Unit Tests (Phase 4 Optimized)
        working-directory: ./frontend
        run: |
          echo "🚀 Phase 4: 运行优化的前端单元test..."

          # 🎯 Phase 4优化：智能test模式选择
          if [ "${{ inputs.coverage }}" == "true" ]; then
            echo "Running tests with coverage (optimized)..."
            # 使用vitest的优化配置，启用并发和缓存
            npm run test:ci -- --reporter=verbose --threads --no-watch --run
          else
            echo "Running fast unit tests..."
            # 快速模式：跳过覆盖率，最大化并发
            npm run test:unit:fast -- --reporter=dot --threads --no-watch
          fi

          echo "✅ 前端单元test完成 (Phase 4优化)"

      - name: Upload Coverage Report (Phase 4 Optimized)
        if: inputs.coverage && always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-unit-coverage
          path: frontend/coverage/
          retention-days: 3 # 🚀 Phase 4: 减少保留期以加快上传
          compression-level: 9 # 最大压缩
          if-no-files-found: warn

      - name: Upload Test Results (Phase 4 Optimized)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-unit-results
          path: frontend/test-results/
          retention-days: 1 # 🚀 Phase 4: 最短保留期
          compression-level: 9
          if-no-files-found: ignore # 忽略缺失文件以避免延迟
