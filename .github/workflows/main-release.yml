name: Main Branch - Production Merge Validation

on:
  push:
    branches: [main]
    # Only trigger on merge commits
  workflow_dispatch:

# Concurrency control
concurrency:
  group: main-merge-${{ github.ref }}
  cancel-in-progress: false # Production merge validation should not be cancelled

jobs:
  # Detect if it's a merge commit
  detect-merge:
    name: Detect Production Merge
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      is-merge: ${{ steps.check.outputs.is-merge }}
      source-branch: ${{ steps.check.outputs.source-branch }}
      pr-number: ${{ steps.check.outputs.pr-number }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 10 # Get sufficient history

      - name: Check if Production Merge Commit
        id: check
        run: |
          echo "Detecting production merge commit..."

          # Check if latest commit is a merge commit
          if git show --format="%P" -s HEAD | wc -w | grep -q "2"; then
            echo "Production merge commit detected"
            echo "is-merge=true" >> $GITHUB_OUTPUT

            # Extract merge information
            COMMIT_MSG=$(git log -1 --pretty=%B)
            echo "Commit message: $COMMIT_MSG"

            # Extract PR number
            if [[ "$COMMIT_MSG" =~ Merge\ pull\ request\ #([0-9]+) ]]; then
              PR_NUMBER="${BASH_REMATCH[1]}"
              echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
              echo "Production PR #$PR_NUMBER detected"
            fi

            # Extract source branch (should be dev branch)
            if [[ "$COMMIT_MSG" =~ from\ .*/(.+) ]]; then
              SOURCE_BRANCH="${BASH_REMATCH[1]}"
              echo "source-branch=$SOURCE_BRANCH" >> $GITHUB_OUTPUT
              echo "Source branch: $SOURCE_BRANCH"

              # Validate only dev branch can merge to main
              if [[ "$SOURCE_BRANCH" != "dev" ]]; then
                echo "ERROR: Only dev branch can merge to main branch"
                echo "   Actual source branch: $SOURCE_BRANCH"
                exit 1
              fi
            fi
          else
            echo "Non-merge commit, skipping production merge validation"
            echo "is-merge=false" >> $GITHUB_OUTPUT
          fi

  # Production readiness check
  production-readiness:
    name: Production Readiness Check
    needs: detect-merge
    if: needs.detect-merge.outputs.is-merge == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Dependencies
        run: |
          echo "Installing production dependencies..."
          npm ci --prefer-offline --no-audit  # Root npm ci handles all workspaces
          cd backend && pip install -r requirements/base.txt

      - name: Production Environment Check
        run: |
          echo "Checking production environment configuration..."

          # Check production environment config file
          if [ ! -f "backend/bravo/settings/production.py" ]; then
            echo "ERROR: Missing production environment config file"
            exit 1
          fi

          # Check frontend production build config
          if [ ! -f "frontend/vite.config.ts" ]; then
            echo "ERROR: Missing frontend build configuration"
            exit 1
          fi

          echo "Production environment configuration check passed"

      - name: Security Configuration Check
        run: |
          echo "Checking production security configuration..."

          # Check for sensitive information exposure
          if grep -r "DEBUG.*=.*True" backend/bravo/settings/production.py; then
            echo "ERROR: Production environment should not enable DEBUG"
            exit 1
          fi

          # Check for test keys
          if grep -r "django-insecure" backend/bravo/settings/; then
            echo "WARNING: Test keys found, please use production keys"
          fi

          echo "Security configuration check passed"

      - name: Database Migration Check
        working-directory: ./backend
        run: |
          echo "Checking database migrations..."

          # Check for unapplied migrations
          python manage.py makemigrations --check --settings=bravo.settings.test

          echo "Database migration check passed"

  # Performance benchmark test
  performance-benchmark:
    name: Performance Benchmark
    needs: detect-merge
    if: needs.detect-merge.outputs.is-merge == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          # Frontend dependencies already managed by root npm ci via workspaces

      - name: Build for Production
        working-directory: ./frontend
        run: |
          echo "Building production version..."
          npm run build

      - name: Run Lighthouse Performance Test
        run: |
          echo "Running Lighthouse performance test..."

          # 创建production级别的lighthouse配置
          cat > lighthouserc.production.json << EOF
          {
            "ci": {
              "collect": {
                "staticDistDir": "./frontend/dist",
                "url": ["index.html"],
                "numberOfRuns": 5,
                "settings": {
                  "chromeFlags": "--no-sandbox --disable-dev-shm-usage --disable-gpu --disable-web-security --disable-features=VizDisplayCompositor --headless",
                  "maxWaitForFcp": 60000,
                  "maxWaitForLoad": 120000,
                  "pauseAfterFcpMs": 3000,
                  "pauseAfterLoadMs": 3000,
                  "networkQuietThresholdMs": 3000,
                  "cpuQuietThresholdMs": 3000,
                  "throttlingMethod": "simulate",
                  "emulatedFormFactor": "desktop"
                }
              },
              "assert": {
                "assertions": {
                  "categories:performance": ["error", {"minScore": 0.85}],
                  "categories:accessibility": ["error", {"minScore": 0.9}],
                  "categories:best-practices": ["error", {"minScore": 0.9}],
                  "categories:seo": ["error", {"minScore": 0.85}]
                }
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOF

          npx lhci autorun --config=lighthouserc.production.json
          echo "Performance benchmark test completed"

  # Rollback preparation
  rollback-preparation:
    name: Rollback Preparation
    needs: detect-merge
    if: needs.detect-merge.outputs.is-merge == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Rollback Script
        run: |
          echo "Generating rollback script..."

          # Get previous main branch commit
          PREVIOUS_COMMIT=$(git log --format="%H" -n 2 HEAD | tail -n 1)

          # Create rollback script
          cat > rollback-script.sh << EOF
          #!/bin/bash
          # Production environment emergency rollback script
          # Generated time: $(date)
          # Current commit: ${{ github.sha }}
          # Rollback target: $PREVIOUS_COMMIT

          echo "Executing production environment emergency rollback..."
          echo "Current commit: ${{ github.sha }}"
          echo "Rolling back to: $PREVIOUS_COMMIT"

          # Create emergency branch
          git checkout -b emergency/rollback-$(date +%Y%m%d-%H%M%S)
          git reset --hard $PREVIOUS_COMMIT

          # Push emergency branch
          git push origin emergency/rollback-$(date +%Y%m%d-%H%M%S)

          echo "Emergency rollback branch created"
          echo "Please immediately create PR to merge this branch to main"
          EOF

          chmod +x rollback-script.sh

          echo "Rollback script generated"

      - name: Upload Rollback Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-rollback-kit
          path: |
            rollback-script.sh
          retention-days: 30

  # Create release tag
  create-release-tag:
    name: Create Release Tag
    needs: [detect-merge, production-readiness, performance-benchmark]
    if: needs.detect-merge.outputs.is-merge == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Generate Release Tag
        run: |
          echo "Creating release tag..."

          # Generate version number (using date and commit short hash)
          VERSION="v$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"

          # Create tag
          git tag -a "$VERSION" -m "Production Release $VERSION

          Source PR: #${{ needs.detect-merge.outputs.pr-number }}
          Source Branch: ${{ needs.detect-merge.outputs.source-branch }}
          Commit: ${{ github.sha }}
          Release Date: $(date)

          Production Readiness: Passed
          Performance Benchmark: Passed
          Rollback Kit: Generated
          "

          # Push tag
          git push origin "$VERSION"

          echo "Release tag $VERSION created"
          echo "release-tag=$VERSION" >> $GITHUB_OUTPUT
        id: release

  # Production merge summary report
  production-merge-summary:
    name: Production Merge Summary
    runs-on: ubuntu-latest
    needs:
      [
        detect-merge,
        production-readiness,
        performance-benchmark,
        rollback-preparation,
        create-release-tag,
      ]
    if: always() && needs.detect-merge.outputs.is-merge == 'true'
    steps:
      - name: Generate Production Report
        run: |
          echo "## Production Merge Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release Tag:** ${{ needs.create-release-tag.outputs.release-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Merge Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Source Branch:** ${{ needs.detect-merge.outputs.source-branch }}" >> $GITHUB_STEP_SUMMARY
          echo "**PR Number:** #${{ needs.detect-merge.outputs.pr-number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Merged By:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Collect validation results
          READINESS_STATUS="${{ needs.production-readiness.result }}"
          PERFORMANCE_STATUS="${{ needs.performance-benchmark.result }}"
          ROLLBACK_STATUS="${{ needs.rollback-preparation.result }}"
          RELEASE_STATUS="${{ needs.create-release-tag.result }}"

          echo "| Production Check | Status | Impact |" >> $GITHUB_STEP_SUMMARY
          echo "|------------------|---------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Production Readiness | $READINESS_STATUS | Critical |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Benchmark | $PERFORMANCE_STATUS | Critical |" >> $GITHUB_STEP_SUMMARY
          echo "| Rollback Preparation | $ROLLBACK_STATUS | Essential |" >> $GITHUB_STEP_SUMMARY
          echo "| Release Tag Creation | $RELEASE_STATUS | Important |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Determine production deployment result
          if [[ "$READINESS_STATUS" == "success" && "$PERFORMANCE_STATUS" == "success" ]]; then
            echo "**Production deployment READY!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Production environment deployment validation passed" >> $GITHUB_STEP_SUMMARY
            echo "System is ready to serve production traffic" >> $GITHUB_STEP_SUMMARY
            echo "Emergency rollback toolkit is ready" >> $GITHUB_STEP_SUMMARY

            if [[ "$ROLLBACK_STATUS" != "success" ]]; then
              echo "WARNING: Rollback preparation has issues, please check manually" >> $GITHUB_STEP_SUMMARY
            fi

            if [[ "$RELEASE_STATUS" != "success" ]]; then
              echo "WARNING: Release tag creation failed, please create manually" >> $GITHUB_STEP_SUMMARY
            fi

            echo "Production merge validation completed successfully"
          else
            echo "**Production deployment FAILED!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Production environment deployment validation failed" >> $GITHUB_STEP_SUMMARY
            echo "Do not deploy to production environment" >> $GITHUB_STEP_SUMMARY
            echo "Need to create fix PR immediately" >> $GITHUB_STEP_SUMMARY
            echo "Production merge validation failed"
            exit 1
          fi

      - name: Production Status Notification
        run: |
          echo "Production Merge Summary:"
          echo "   - Release Tag: ${{ needs.create-release-tag.outputs.release-tag }}"
          echo "   - Merge Commit: ${{ github.sha }}"
          echo "   - Source: ${{ needs.detect-merge.outputs.source-branch }}"
          echo "   - PR: #${{ needs.detect-merge.outputs.pr-number }}"
          echo "   - Status: Production Ready"
          echo "   - Rollback Kit: Available"
