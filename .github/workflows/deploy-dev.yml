name: Deploy to Dev Environment

on:
  # 在镜像构建完成后自动触发
  workflow_run:
    workflows: ["🐳 Build and Push Docker Images"]
    types:
      - completed
    branches: [dev]
  # 保留手动触发选项
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    # 只有在镜像构建成功时才部署
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: dev # 强制拉取dev分支最新代码，确保使用最新的workflow和健康检查逻辑

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.ALIYUN_SSH_KEY }}

      - name: Deploy to dev server
        env:
          HOST: ${{ secrets.ALIYUN_HOST }}
          USER: ${{ secrets.ALIYUN_USER }}
          REGISTRY_USERNAME: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}
        run: |
          ssh -o StrictHostKeyChecking=no \
              -o ServerAliveInterval=30 \
              -o ServerAliveCountMax=30 \
              $USER@$HOST bash -s << 'ENDSSH' "$REGISTRY_USERNAME" "$REGISTRY_PASSWORD"
            set -e

            # 接收参数
            REGISTRY_USERNAME="$1"
            REGISTRY_PASSWORD="$2"

          echo "📁 进入项目目录..."
          cd /home/layne/project/bravo-dev

          echo "🔄 拉取最新代码..."
          if [ -d ".git" ]; then
            # 先清理所有未提交的改动和未跟踪文件
            git reset --hard HEAD
            git clean -fdx
            # 强制更新远程分支信息
            git fetch --force --prune origin
            git reset --hard origin/dev
          else
            git clone -b dev https://github.com/Layneliang24/Bravo.git .
          fi

          echo "⏹️  停止旧容器..."
          COMPOSE_PROJECT_NAME=bravo-dev docker-compose -f docker-compose.prod.yml down || true

          echo "🔐 登录阿里云镜像仓库..."
          echo "${REGISTRY_PASSWORD}" | docker login crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com --username "${REGISTRY_USERNAME}" --password-stdin

          echo "📦 拉取最新镜像..."
          COMPOSE_PROJECT_NAME=bravo-dev IMAGE_TAG=dev docker-compose -f docker-compose.prod.yml pull

          echo "🚀 启动服务..."
          # 检查是否配置了SSL证书（域名模式）
          if [ -d "/etc/letsencrypt/live/dev.layneliang.com" ]; then
            echo "检测到SSL证书，使用域名配置..."
            if [ -f "frontend/nginx.domain-dev.conf" ]; then
              cp frontend/nginx.domain-dev.conf frontend/nginx.conf.tmp
              echo "使用域名Nginx配置"
            fi
            USE_DOMAIN=true
            DOMAIN_NAME=dev.layneliang.com
          else
            echo "未检测到SSL证书，使用IP配置..."
            USE_DOMAIN=false
            DOMAIN_NAME=""
          fi

          # 为dev环境使用不同端口避免与prod冲突
          COMPOSE_PROJECT_NAME=bravo-dev \
          IMAGE_TAG=dev \
          USE_DOMAIN=$USE_DOMAIN \
          DOMAIN_NAME=$DOMAIN_NAME \
          MYSQL_PORT=3307 \
          REDIS_PORT=6380 \
          BACKEND_PORT=8001 \
          FRONTEND_HTTP_PORT=8080 \
          FRONTEND_HTTPS_PORT=8443 \
          DJANGO_SECRET_KEY="${DJANGO_SECRET_KEY:-dev-secret-$(date +%s)}" \
          docker-compose -f docker-compose.prod.yml up -d

          echo "⏳ 等待服务就绪..."
          sleep 10

          echo "🔧 配置Nginx SSL..."
          # 复制开发环境SSL配置到容器
          if [ -f "frontend/nginx.domain-dev.conf" ]; then
            docker cp frontend/nginx.domain-dev.conf bravo-dev-frontend:/etc/nginx/conf.d/default.conf
            docker exec bravo-dev-frontend nginx -t && docker exec bravo-dev-frontend nginx -s reload
            echo "✅ 开发环境SSL配置已应用（dev.layneliang.com）"
          else
            echo "⚠️  未找到nginx.domain-dev.conf，跳过SSL配置"
          fi

          echo "📊 检查服务状态..."
          COMPOSE_PROJECT_NAME=bravo-dev docker-compose -f docker-compose.prod.yml ps

          echo "🔍 验证Nginx端口..."
          docker exec bravo-dev-frontend netstat -tlnp | grep -E '(:80|:443)' || echo "Nginx端口检查完成"

          echo "📁 验证静态文件..."
          echo "Backend镜像内的原始静态文件:"
          docker exec bravo-dev-backend ls -la /app/staticfiles/ | head -20 || echo "⚠️ Backend镜像内静态文件为空"
          echo "Backend容器共享卷中的静态文件:"
          docker exec bravo-dev-backend ls -la /shared/static/ | head -20 || echo "⚠️ Backend共享卷为空"
          echo "Frontend容器内的静态文件:"
          docker exec bravo-dev-frontend ls -la /usr/share/nginx/html/static/ | head -20 || echo "⚠️ Frontend静态文件目录为空"
          echo "检查admin静态文件:"
          docker exec bravo-dev-frontend ls -la /usr/share/nginx/html/static/admin/ | head -10 || echo "⚠️ Admin静态文件不存在"
          echo "检查Backend的STATIC_ROOT配置:"
          docker exec bravo-dev-backend python -c "from bravo.settings.production import STATIC_ROOT; print(f'STATIC_ROOT: {STATIC_ROOT}')" || echo "⚠️ 无法获取STATIC_ROOT"

          # 在部署前备份当前运行的镜像（用于回滚）
          echo "📦 备份当前镜像作为回滚点..."
          if docker images | grep -q bravo-dev-backend; then
            docker tag bravo-dev-backend:latest bravo-dev-backend-backup:latest || echo "Backend backup created"
          fi
          if docker images | grep -q bravo-dev-frontend; then
            docker tag bravo-dev-frontend:latest bravo-dev-frontend-backup:latest || echo "Frontend backup created"
          fi

          # 记录部署信息
          echo "DEPLOYED_AT=$(date '+%Y-%m-%d %H:%M:%S')" > .deployment-current
          echo "GITHUB_SHA=${{ github.sha }}" >> .deployment-current
          echo "GITHUB_RUN_ID=${{ github.run_id }}" >> .deployment-current

          echo "✅ Dev环境部署步骤完成，准备健康检查..."
          ENDSSH

      - name: Health Check with Auto Rollback
        id: health-check
        if: always()
        env:
          HOST: ${{ secrets.ALIYUN_HOST }}
          USER: ${{ secrets.ALIYUN_USER }}
          REGISTRY_USERNAME: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}
        run: |
          ssh -o StrictHostKeyChecking=no $USER@$HOST bash -s << 'ENDSSH' "$REGISTRY_USERNAME" "$REGISTRY_PASSWORD"
            set -e

            REGISTRY_USERNAME="$1"
            REGISTRY_PASSWORD="$2"

            echo "🏥 开始Dev环境健康检查..."
            cd /home/layne/project/bravo-dev

            # 健康检查函数
            check_health() {
              local retry=0
              local max_retry=3

              while [ $retry -lt $max_retry ]; do
                echo "🔍 健康检查 ($((retry+1))/$max_retry)..."

                # 检查容器状态
                if ! docker ps | grep -q bravo-dev-backend; then
                  echo "❌ Backend容器未运行"
                  retry=$((retry+1))
                  sleep 10
                  continue
                fi

                if ! docker ps | grep -q bravo-dev-frontend; then
                  echo "❌ Frontend容器未运行"
                  retry=$((retry+1))
                  sleep 10
                  continue
                fi

                # 检查前端（使用dev环境端口8080）
                FRONTEND_STATUS=$(curl -L -s -o /dev/null -w "%{http_code}" http://localhost:8080/ || echo "000")
                if [ "$FRONTEND_STATUS" != "200" ]; then
                  echo "⚠️ 前端健康检查失败 (状态码: $FRONTEND_STATUS)"
                  retry=$((retry+1))
                  sleep 10
                  continue
                fi

                # 检查后端API（使用dev环境端口8001）
                BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8001/api/ || echo "000")
                if [ "$BACKEND_STATUS" != "200" ]; then
                  echo "⚠️ 后端API健康检查失败 (状态码: $BACKEND_STATUS)"
                  retry=$((retry+1))
                  sleep 10
                  continue
                fi

                # 所有检查通过
                echo "✅ 健康检查通过"
                echo "  - Frontend (port 8080): $FRONTEND_STATUS"
                echo "  - Backend API (port 8001): $BACKEND_STATUS"
                return 0
              done

              echo "❌ 健康检查失败（重试${max_retry}次）"
              return 1
            }

            # 执行健康检查
            if check_health; then
              echo "🎉 Dev环境部署成功！"

              # 登录镜像仓库以更新dev-stable标签
              echo "${REGISTRY_PASSWORD}" | docker login crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com --username "${REGISTRY_USERNAME}" --password-stdin

              # 更新dev-stable标签（标记为dev稳定版本）
              echo "🏷️  更新dev-stable标签..."
              docker tag crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/backend:dev \
                         crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/backend:dev-stable || true
              docker tag crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/frontend:dev \
                         crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/frontend:dev-stable || true

              # 推送stable标签到远程仓库（用于远程回滚）
              docker push crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/backend:dev-stable || echo "⚠️ 推送backend dev-stable标签失败"
              docker push crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/frontend:dev-stable || echo "⚠️ 推送frontend dev-stable标签失败"

              # 记录到部署历史
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] Dev部署成功 - GitHub SHA: ${{ github.sha }} - Run ID: ${{ github.run_id }}" >> .deployment-history

              exit 0
            else
              echo "🚨 健康检查失败，开始自动回滚..."

              # 检查是否有备份可以回滚
              if ! docker images | grep -q bravo-dev-backend-backup; then
                echo "❌ 没有可回滚的备份镜像"
                echo "[$(date '+%Y-%m-%d %H:%M:%S')] Dev部署失败 - 无法回滚 - GitHub SHA: ${{ github.sha }}" >> .deployment-history
                exit 1
              fi

              echo "⏹️  停止失败的容器..."
              COMPOSE_PROJECT_NAME=bravo-dev docker-compose -f docker-compose.prod.yml down

              echo "🔄 使用备份镜像回滚..."
              # 使用backup标签恢复
              docker tag bravo-dev-backend-backup:latest crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/backend:dev
              docker tag bravo-dev-frontend-backup:latest crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com/bravo-project/frontend:dev
              echo "✅ 已恢复备份镜像"

              echo "🚀 重新启动服务（使用备份版本）..."
              COMPOSE_PROJECT_NAME=bravo-dev \
              IMAGE_TAG=dev \
              USE_DOMAIN=true \
              DOMAIN_NAME=dev.layneliang.com \
              MYSQL_PORT=3307 \
              REDIS_PORT=6380 \
              BACKEND_PORT=8001 \
              FRONTEND_HTTP_PORT=8080 \
              FRONTEND_HTTPS_PORT=8443 \
              DJANGO_SECRET_KEY="${DJANGO_SECRET_KEY:-dev-secret-$(date +%s)}" \
              docker-compose -f docker-compose.prod.yml up -d

              echo "⏳ 等待回滚后的服务就绪..."
              sleep 15

              # 重新配置Nginx SSL
              if [ -f "frontend/nginx.domain-dev.conf" ]; then
                docker cp frontend/nginx.domain-dev.conf bravo-dev-frontend:/etc/nginx/conf.d/default.conf
                docker exec bravo-dev-frontend nginx -t && docker exec bravo-dev-frontend nginx -s reload
                echo "✅ 回滚后SSL配置已应用"
              fi

              echo "🔍 验证回滚后的服务..."
              if check_health; then
                echo "✅ 回滚成功！服务已恢复到上一个稳定版本"
                echo "[$(date '+%Y-%m-%d %H:%M:%S')] Dev部署失败 - 已自动回滚成功 - GitHub SHA: ${{ github.sha }}" >> .deployment-history
                exit 1  # 仍然返回失败状态，表示本次部署失败了
              else
                echo "❌ 回滚后健康检查仍然失败"
                echo "[$(date '+%Y-%m-%d %H:%M:%S')] Dev部署失败 - 回滚也失败 - GitHub SHA: ${{ github.sha }}" >> .deployment-history
                exit 1
              fi
            fi
          ENDSSH
