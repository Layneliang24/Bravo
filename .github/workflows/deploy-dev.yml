name: Deploy to Dev Environment

on:
  # 在镜像构建完成后自动触发
  workflow_run:
    workflows: ["🐳 Build and Push Docker Images"]
    types:
      - completed
    branches: [dev]
  # 保留手动触发选项
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    # 只有在镜像构建成功时才部署
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.ALIYUN_SSH_KEY }}

      - name: Deploy to dev server
        env:
          HOST: ${{ secrets.ALIYUN_HOST }}
          USER: ${{ secrets.ALIYUN_USER }}
          REGISTRY_USERNAME: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}
        run: |
          ssh -o StrictHostKeyChecking=no \
              -o ServerAliveInterval=30 \
              -o ServerAliveCountMax=30 \
              $USER@$HOST bash -s << 'ENDSSH' "$REGISTRY_USERNAME" "$REGISTRY_PASSWORD"
            set -e

            # 接收参数
            REGISTRY_USERNAME="$1"
            REGISTRY_PASSWORD="$2"

          echo "📁 进入项目目录..."
          cd /home/layne/project/bravo-dev

          echo "🔄 拉取最新代码..."
          if [ -d ".git" ]; then
            # 先清理所有未提交的改动和未跟踪文件
            git reset --hard HEAD
            git clean -fdx
            # 强制更新远程分支信息
            git fetch --force --prune origin
            git reset --hard origin/dev
          else
            git clone -b dev https://github.com/Layneliang24/Bravo.git .
          fi

          echo "⏹️  停止旧容器..."
          COMPOSE_PROJECT_NAME=bravo-dev docker-compose -f docker-compose.prod.yml down || true

          echo "🔐 登录阿里云镜像仓库..."
          echo "${REGISTRY_PASSWORD}" | docker login crpi-noqbdktswju6cuew.cn-shenzhen.personal.cr.aliyuncs.com --username "${REGISTRY_USERNAME}" --password-stdin

          echo "📦 拉取最新镜像..."
          COMPOSE_PROJECT_NAME=bravo-dev IMAGE_TAG=dev docker-compose -f docker-compose.prod.yml pull

          echo "🚀 启动服务..."
          # 检查是否配置了SSL证书（域名模式）
          if [ -d "/etc/letsencrypt/live/dev.layneliang.com" ]; then
            echo "检测到SSL证书，使用域名配置..."
            if [ -f "frontend/nginx.domain-dev.conf" ]; then
              cp frontend/nginx.domain-dev.conf frontend/nginx.conf.tmp
              echo "使用域名Nginx配置"
            fi
            USE_DOMAIN=true
            DOMAIN_NAME=dev.layneliang.com
          else
            echo "未检测到SSL证书，使用IP配置..."
            USE_DOMAIN=false
            DOMAIN_NAME=""
          fi

          # 为dev环境使用不同端口避免与prod冲突
          COMPOSE_PROJECT_NAME=bravo-dev \
          IMAGE_TAG=dev \
          USE_DOMAIN=$USE_DOMAIN \
          DOMAIN_NAME=$DOMAIN_NAME \
          MYSQL_PORT=3307 \
          REDIS_PORT=6380 \
          BACKEND_PORT=8001 \
          FRONTEND_HTTP_PORT=8080 \
          FRONTEND_HTTPS_PORT=8443 \
          DJANGO_SECRET_KEY="${DJANGO_SECRET_KEY:-dev-secret-$(date +%s)}" \
          docker-compose -f docker-compose.prod.yml up -d

          echo "⏳ 等待服务就绪..."
          sleep 10

          echo "🔧 配置Nginx SSL..."
          # 复制SSL配置到容器
          if [ -f "frontend/nginx.ssl.conf" ]; then
            docker cp frontend/nginx.ssl.conf bravo-dev-frontend:/etc/nginx/conf.d/ssl.conf
            docker exec bravo-dev-frontend nginx -t && docker exec bravo-dev-frontend nginx -s reload
            echo "✅ SSL配置已应用"
          else
            echo "⚠️  未找到nginx.ssl.conf，跳过SSL配置"
          fi

          echo "📊 检查服务状态..."
          COMPOSE_PROJECT_NAME=bravo-dev docker-compose -f docker-compose.prod.yml ps

          echo "🔍 验证Nginx端口..."
          docker exec bravo-dev-frontend netstat -tlnp | grep -E '(:80|:443)' || echo "Nginx端口检查完成"

          echo "📁 验证静态文件..."
          echo "Backend镜像内的原始静态文件:"
          docker exec bravo-dev-backend ls -la /app/staticfiles/ | head -20 || echo "⚠️ Backend镜像内静态文件为空"
          echo "Backend容器共享卷中的静态文件:"
          docker exec bravo-dev-backend ls -la /shared/static/ | head -20 || echo "⚠️ Backend共享卷为空"
          echo "Frontend容器内的静态文件:"
          docker exec bravo-dev-frontend ls -la /usr/share/nginx/html/static/ | head -20 || echo "⚠️ Frontend静态文件目录为空"
          echo "检查admin静态文件:"
          docker exec bravo-dev-frontend ls -la /usr/share/nginx/html/static/admin/ | head -10 || echo "⚠️ Admin静态文件不存在"
          echo "检查Backend的STATIC_ROOT配置:"
          docker exec bravo-dev-backend python -c "from bravo.settings.production import STATIC_ROOT; print(f'STATIC_ROOT: {STATIC_ROOT}')" || echo "⚠️ 无法获取STATIC_ROOT"

          echo "✅ Dev环境部署完成"
          ENDSSH
