# Bravo 开发环境 Docker Compose 配置
# 优化版本 - 支持热重载、调试、性能监控

version: '3.8'

services:
  # MySQL 数据库服务
  mysql:
    image: mysql:8.0
    container_name: bravo-mysql-dev
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: bravo_dev
      MYSQL_USER: bravo_user
      MYSQL_PASSWORD: bravo_password
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/mysql-init:/docker-entrypoint-initdb.d
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M
      --max-connections=100
      - --log-bin-trust-function-creators=1
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpassword"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - bravo-network
    restart: unless-stopped

  # Redis 缓存服务
  redis:
    image: redis:7-alpine
    container_name: bravo-redis-dev
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - bravo-network
    restart: unless-stopped

  # 后端开发服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
      args:
        - PYTHON_VERSION=3.11
    container_name: bravo-backend-dev
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=bravo.settings.local
      - DATABASE_URL=mysql://bravo_user:bravo_password@mysql:3306/bravo_dev
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - WATCHFILES_FORCE_POLLING=1
    ports:
      - "8000:8000"
      - "5678:5678"  # Python debugger
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
      - backend_media:/app/media
      - backend_static:/app/staticfiles
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        echo '🚀 Starting backend development server...' &&
        python manage.py migrate --noinput &&
        python manage.py collectstatic --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - bravo-network
    restart: unless-stopped

  # Celery Worker 服务
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: bravo-celery-worker-dev
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=bravo.settings.local
      - DATABASE_URL=mysql://bravo_user:bravo_password@mysql:3306/bravo_dev
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    depends_on:
      - mysql
      - redis
      - backend
    command: >
      sh -c "
        echo '🔄 Starting Celery worker...' &&
        celery -A bravo worker --loglevel=info --concurrency=2
      "
    networks:
      - bravo-network
    restart: unless-stopped

  # Celery Beat 调度服务
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: bravo-celery-beat-dev
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=bravo.settings.local
      - DATABASE_URL=mysql://bravo_user:bravo_password@mysql:3306/bravo_dev
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - PYTHONPATH=/app
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    depends_on:
      - mysql
      - redis
      - backend
    command: >
      sh -c "
        echo '⏰ Starting Celery beat scheduler...' &&
        celery -A bravo beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
      "
    networks:
      - bravo-network
    restart: unless-stopped

  # 前端开发服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      args:
        - NODE_VERSION=20
    container_name: bravo-frontend-dev
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    ports:
      - "3000:3000"
      - "3001:3001"  # Preview server
      - "24678:24678"  # Vite HMR
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_dist:/app/dist
    command: >
      sh -c "
        echo '⚡ Starting frontend development server...' &&
        npm run dev -- --host 0.0.0.0 --port 3000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - bravo-network
    restart: unless-stopped

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: bravo-nginx-dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/dev.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - backend_static:/var/www/static
      - backend_media:/var/www/media
    depends_on:
      - backend
      - frontend
    networks:
      - bravo-network
    restart: unless-stopped

  # 监控服务 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: bravo-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    networks:
      - bravo-network
    restart: unless-stopped

  # 监控服务 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: bravo-grafana-dev
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - bravo-network
    restart: unless-stopped

  # 日志聚合 - ELK Stack (简化版)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: bravo-elasticsearch-dev
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - bravo-network
    restart: unless-stopped

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: bravo-kibana-dev
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - bravo-network
    restart: unless-stopped

  # 工具服务 - Mailhog (邮件测试)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: bravo-mailhog-dev
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - bravo-network
    restart: unless-stopped

  # 工具服务 - MinIO (S3 兼容存储)
  minio:
    image: minio/minio:latest
    container_name: bravo-minio-dev
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - bravo-network
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_media:
    driver: local
  backend_static:
    driver: local
  frontend_node_modules:
    driver: local
  frontend_dist:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  minio_data:
    driver: local

networks:
  bravo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
